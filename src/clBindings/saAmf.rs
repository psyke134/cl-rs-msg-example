pub use crate::clBindings::saAis::*;
pub use crate::clBindings::saNtf::*;
/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const SA_AMF_PM_ZERO_EXIT: u32 = 1;
pub const SA_AMF_PM_NON_ZERO_EXIT: u32 = 2;
pub const SA_AMF_PM_ABNORMAL_END: u32 = 4;
pub const SA_AMF_HEALTHCHECK_KEY_MAX: u32 = 32;
pub const SA_AMF_CSI_ADD_ONE: u32 = 1;
pub const SA_AMF_CSI_TARGET_ONE: u32 = 2;
pub const SA_AMF_CSI_TARGET_ALL: u32 = 4;
pub type SaAmfHandleT = SaUint64T;
pub type SaAmfPmErrorsT = SaUint32T;
pub const SaAmfPmStopQualifierT_SA_AMF_PM_PROC: SaAmfPmStopQualifierT = 1;
pub const SaAmfPmStopQualifierT_SA_AMF_PM_PROC_AND_DESCENDENTS: SaAmfPmStopQualifierT = 2;
pub const SaAmfPmStopQualifierT_SA_AMF_PM_ALL_PROCESSES: SaAmfPmStopQualifierT = 3;
pub type SaAmfPmStopQualifierT = ::std::os::raw::c_uint;
pub const SaAmfHealthcheckInvocationT_SA_AMF_HEALTHCHECK_AMF_INVOKED: SaAmfHealthcheckInvocationT =
    1;
pub const SaAmfHealthcheckInvocationT_SA_AMF_HEALTHCHECK_COMPONENT_INVOKED:
    SaAmfHealthcheckInvocationT = 2;
pub type SaAmfHealthcheckInvocationT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaAmfHealthcheckKeyT {
    pub key: [SaUint8T; 32usize],
    pub keyLen: SaUint16T,
}
#[test]
fn bindgen_test_layout_SaAmfHealthcheckKeyT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfHealthcheckKeyT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfHealthcheckKeyT>(),
        34usize,
        concat!("Size of: ", stringify!(SaAmfHealthcheckKeyT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfHealthcheckKeyT>(),
        2usize,
        concat!("Alignment of ", stringify!(SaAmfHealthcheckKeyT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfHealthcheckKeyT),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfHealthcheckKeyT),
            "::",
            stringify!(keyLen)
        )
    );
}
pub const SaAmfHAStateT_SA_AMF_HA_ACTIVE: SaAmfHAStateT = 1;
pub const SaAmfHAStateT_SA_AMF_HA_STANDBY: SaAmfHAStateT = 2;
pub const SaAmfHAStateT_SA_AMF_HA_QUIESCED: SaAmfHAStateT = 3;
pub const SaAmfHAStateT_SA_AMF_HA_QUIESCING: SaAmfHAStateT = 4;
pub type SaAmfHAStateT = ::std::os::raw::c_uint;
pub type SaAmfCSIFlagsT = SaUint32T;
pub const SaAmfCSITransitionDescriptorT_SA_AMF_CSI_NEW_ASSIGN: SaAmfCSITransitionDescriptorT = 1;
pub const SaAmfCSITransitionDescriptorT_SA_AMF_CSI_QUIESCED: SaAmfCSITransitionDescriptorT = 2;
pub const SaAmfCSITransitionDescriptorT_SA_AMF_CSI_NOT_QUIESCED: SaAmfCSITransitionDescriptorT = 3;
pub const SaAmfCSITransitionDescriptorT_SA_AMF_CSI_STILL_ACTIVE: SaAmfCSITransitionDescriptorT = 4;
pub type SaAmfCSITransitionDescriptorT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaAmfCSIActiveDescriptorT {
    pub transitionDescriptor: SaAmfCSITransitionDescriptorT,
    pub activeCompName: SaNameT,
}
#[test]
fn bindgen_test_layout_SaAmfCSIActiveDescriptorT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfCSIActiveDescriptorT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfCSIActiveDescriptorT>(),
        264usize,
        concat!("Size of: ", stringify!(SaAmfCSIActiveDescriptorT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfCSIActiveDescriptorT>(),
        4usize,
        concat!("Alignment of ", stringify!(SaAmfCSIActiveDescriptorT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transitionDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIActiveDescriptorT),
            "::",
            stringify!(transitionDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeCompName) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIActiveDescriptorT),
            "::",
            stringify!(activeCompName)
        )
    );
}
#[repr(C)]
pub struct SaAmfCSIStandbyDescriptorT {
    pub activeCompName: SaNameT,
    pub standbyRank: SaUint32T,
}
#[test]
fn bindgen_test_layout_SaAmfCSIStandbyDescriptorT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfCSIStandbyDescriptorT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfCSIStandbyDescriptorT>(),
        264usize,
        concat!("Size of: ", stringify!(SaAmfCSIStandbyDescriptorT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfCSIStandbyDescriptorT>(),
        4usize,
        concat!("Alignment of ", stringify!(SaAmfCSIStandbyDescriptorT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeCompName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIStandbyDescriptorT),
            "::",
            stringify!(activeCompName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standbyRank) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIStandbyDescriptorT),
            "::",
            stringify!(standbyRank)
        )
    );
}
#[repr(C)]
pub struct SaAmfCSIStateDescriptorT {
    pub activeDescriptor: __BindgenUnionField<SaAmfCSIActiveDescriptorT>,
    pub standbyDescriptor: __BindgenUnionField<SaAmfCSIStandbyDescriptorT>,
    pub bindgen_union_field: [u32; 66usize],
}
#[test]
fn bindgen_test_layout_SaAmfCSIStateDescriptorT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfCSIStateDescriptorT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfCSIStateDescriptorT>(),
        264usize,
        concat!("Size of: ", stringify!(SaAmfCSIStateDescriptorT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfCSIStateDescriptorT>(),
        4usize,
        concat!("Alignment of ", stringify!(SaAmfCSIStateDescriptorT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIStateDescriptorT),
            "::",
            stringify!(activeDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standbyDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIStateDescriptorT),
            "::",
            stringify!(standbyDescriptor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaAmfCSIAttributeT {
    pub attrName: *mut SaUint8T,
    pub attrValue: *mut SaUint8T,
}
#[test]
fn bindgen_test_layout_SaAmfCSIAttributeT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfCSIAttributeT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfCSIAttributeT>(),
        16usize,
        concat!("Size of: ", stringify!(SaAmfCSIAttributeT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfCSIAttributeT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaAmfCSIAttributeT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIAttributeT),
            "::",
            stringify!(attrName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIAttributeT),
            "::",
            stringify!(attrValue)
        )
    );
}
#[repr(C)]
pub struct SaAmfCSIAttributeListT {
    pub attr: *mut SaAmfCSIAttributeT,
    pub number: SaUint32T,
}
#[test]
fn bindgen_test_layout_SaAmfCSIAttributeListT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfCSIAttributeListT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfCSIAttributeListT>(),
        16usize,
        concat!("Size of: ", stringify!(SaAmfCSIAttributeListT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfCSIAttributeListT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaAmfCSIAttributeListT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIAttributeListT),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIAttributeListT),
            "::",
            stringify!(number)
        )
    );
}
#[repr(C)]
pub struct SaAmfCSIDescriptorT {
    pub csiFlags: SaAmfCSIFlagsT,
    pub csiName: SaNameT,
    pub csiStateDescriptor: SaAmfCSIStateDescriptorT,
    pub csiAttr: SaAmfCSIAttributeListT,
}
#[test]
fn bindgen_test_layout_SaAmfCSIDescriptorT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfCSIDescriptorT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfCSIDescriptorT>(),
        544usize,
        concat!("Size of: ", stringify!(SaAmfCSIDescriptorT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfCSIDescriptorT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaAmfCSIDescriptorT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csiFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIDescriptorT),
            "::",
            stringify!(csiFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csiName) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIDescriptorT),
            "::",
            stringify!(csiName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csiStateDescriptor) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIDescriptorT),
            "::",
            stringify!(csiStateDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csiAttr) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCSIDescriptorT),
            "::",
            stringify!(csiAttr)
        )
    );
}
#[repr(C)]
pub struct SaAmfProtectionGroupMemberT {
    pub compName: SaNameT,
    pub haState: SaAmfHAStateT,
    pub rank: SaUint32T,
}
#[test]
fn bindgen_test_layout_SaAmfProtectionGroupMemberT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfProtectionGroupMemberT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfProtectionGroupMemberT>(),
        268usize,
        concat!("Size of: ", stringify!(SaAmfProtectionGroupMemberT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfProtectionGroupMemberT>(),
        4usize,
        concat!("Alignment of ", stringify!(SaAmfProtectionGroupMemberT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfProtectionGroupMemberT),
            "::",
            stringify!(compName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).haState) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfProtectionGroupMemberT),
            "::",
            stringify!(haState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rank) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfProtectionGroupMemberT),
            "::",
            stringify!(rank)
        )
    );
}
pub const SaAmfProtectionGroupChangesT_SA_AMF_PROTECTION_GROUP_NO_CHANGE:
    SaAmfProtectionGroupChangesT = 1;
pub const SaAmfProtectionGroupChangesT_SA_AMF_PROTECTION_GROUP_ADDED: SaAmfProtectionGroupChangesT =
    2;
pub const SaAmfProtectionGroupChangesT_SA_AMF_PROTECTION_GROUP_REMOVED:
    SaAmfProtectionGroupChangesT = 3;
pub const SaAmfProtectionGroupChangesT_SA_AMF_PROTECTION_GROUP_STATE_CHANGE:
    SaAmfProtectionGroupChangesT = 4;
pub type SaAmfProtectionGroupChangesT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaAmfProtectionGroupNotificationT {
    pub member: SaAmfProtectionGroupMemberT,
    pub change: SaAmfProtectionGroupChangesT,
}
#[test]
fn bindgen_test_layout_SaAmfProtectionGroupNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfProtectionGroupNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfProtectionGroupNotificationT>(),
        272usize,
        concat!("Size of: ", stringify!(SaAmfProtectionGroupNotificationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfProtectionGroupNotificationT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(SaAmfProtectionGroupNotificationT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).member) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfProtectionGroupNotificationT),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).change) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfProtectionGroupNotificationT),
            "::",
            stringify!(change)
        )
    );
}
#[repr(C)]
pub struct SaAmfProtectionGroupNotificationBufferT {
    pub numberOfItems: SaUint32T,
    pub notification: *mut SaAmfProtectionGroupNotificationT,
}
#[test]
fn bindgen_test_layout_SaAmfProtectionGroupNotificationBufferT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfProtectionGroupNotificationBufferT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfProtectionGroupNotificationBufferT>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(SaAmfProtectionGroupNotificationBufferT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfProtectionGroupNotificationBufferT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaAmfProtectionGroupNotificationBufferT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberOfItems) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfProtectionGroupNotificationBufferT),
            "::",
            stringify!(numberOfItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notification) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfProtectionGroupNotificationBufferT),
            "::",
            stringify!(notification)
        )
    );
}
pub const SaAmfRecommendedRecoveryT_SA_AMF_NO_RECOMMENDATION: SaAmfRecommendedRecoveryT = 1;
pub const SaAmfRecommendedRecoveryT_SA_AMF_COMPONENT_RESTART: SaAmfRecommendedRecoveryT = 2;
pub const SaAmfRecommendedRecoveryT_SA_AMF_COMPONENT_FAILOVER: SaAmfRecommendedRecoveryT = 3;
pub const SaAmfRecommendedRecoveryT_SA_AMF_NODE_SWITCHOVER: SaAmfRecommendedRecoveryT = 4;
pub const SaAmfRecommendedRecoveryT_SA_AMF_NODE_FAILOVER: SaAmfRecommendedRecoveryT = 5;
pub const SaAmfRecommendedRecoveryT_SA_AMF_NODE_FAILFAST: SaAmfRecommendedRecoveryT = 6;
pub const SaAmfRecommendedRecoveryT_SA_AMF_CLUSTER_RESET: SaAmfRecommendedRecoveryT = 7;
pub type SaAmfRecommendedRecoveryT = ::std::os::raw::c_uint;
pub type SaAmfHealthcheckCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        invocation: SaInvocationT,
        compName: *const SaNameT,
        healthcheckKey: *mut SaAmfHealthcheckKeyT,
    ),
>;
pub type SaAmfComponentTerminateCallbackT = ::std::option::Option<
    unsafe extern "C" fn(invocation: SaInvocationT, compName: *const SaNameT),
>;
pub type SaAmfCSISetCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        invocation: SaInvocationT,
        compName: *const SaNameT,
        haState: SaAmfHAStateT,
        csiDescriptor: SaAmfCSIDescriptorT,
    ),
>;
pub type SaAmfCSIRemoveCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        invocation: SaInvocationT,
        compName: *const SaNameT,
        csiName: *const SaNameT,
        csiFlags: SaAmfCSIFlagsT,
    ),
>;
pub type SaAmfProtectionGroupTrackCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        csiName: *const SaNameT,
        notificationBuffer: *mut SaAmfProtectionGroupNotificationBufferT,
        numberOfMembers: SaUint32T,
        error: SaAisErrorT,
    ),
>;
pub type SaAmfProxiedComponentInstantiateCallbackT = ::std::option::Option<
    unsafe extern "C" fn(invocation: SaInvocationT, proxiedCompName: *const SaNameT),
>;
pub type SaAmfProxiedComponentCleanupCallbackT = ::std::option::Option<
    unsafe extern "C" fn(invocation: SaInvocationT, proxiedCompName: *const SaNameT),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaAmfCallbacksT {
    pub saAmfHealthcheckCallback: SaAmfHealthcheckCallbackT,
    pub saAmfComponentTerminateCallback: SaAmfComponentTerminateCallbackT,
    pub saAmfCSISetCallback: SaAmfCSISetCallbackT,
    pub saAmfCSIRemoveCallback: SaAmfCSIRemoveCallbackT,
    pub saAmfProtectionGroupTrackCallback: SaAmfProtectionGroupTrackCallbackT,
    pub saAmfProxiedComponentInstantiateCallback: SaAmfProxiedComponentInstantiateCallbackT,
    pub saAmfProxiedComponentCleanupCallback: SaAmfProxiedComponentCleanupCallbackT,
}
#[test]
fn bindgen_test_layout_SaAmfCallbacksT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAmfCallbacksT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAmfCallbacksT>(),
        56usize,
        concat!("Size of: ", stringify!(SaAmfCallbacksT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAmfCallbacksT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaAmfCallbacksT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saAmfHealthcheckCallback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCallbacksT),
            "::",
            stringify!(saAmfHealthcheckCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saAmfComponentTerminateCallback) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCallbacksT),
            "::",
            stringify!(saAmfComponentTerminateCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saAmfCSISetCallback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCallbacksT),
            "::",
            stringify!(saAmfCSISetCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saAmfCSIRemoveCallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCallbacksT),
            "::",
            stringify!(saAmfCSIRemoveCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saAmfProtectionGroupTrackCallback) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCallbacksT),
            "::",
            stringify!(saAmfProtectionGroupTrackCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saAmfProxiedComponentInstantiateCallback) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCallbacksT),
            "::",
            stringify!(saAmfProxiedComponentInstantiateCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saAmfProxiedComponentCleanupCallback) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAmfCallbacksT),
            "::",
            stringify!(saAmfProxiedComponentCleanupCallback)
        )
    );
}
extern "C" {
    pub fn saAmfInitialize(
        amfHandle: *mut SaAmfHandleT,
        amfCallbacks: *const SaAmfCallbacksT,
        version: *mut SaVersionT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfSelectionObjectGet(
        amfHandle: SaAmfHandleT,
        selectionObject: *mut SaSelectionObjectT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfDispatch(amfHandle: SaAmfHandleT, dispatchFlags: SaDispatchFlagsT) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfFinalize(amfHandle: SaAmfHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfComponentRegister(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        proxyCompName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfComponentUnregister(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        proxyCompName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfComponentNameGet(amfHandle: SaAmfHandleT, compName: *mut SaNameT) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfPmStart(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        processId: SaUint64T,
        descendentsTreeDepth: SaInt32T,
        pmErrors: SaAmfPmErrorsT,
        recommendedRecovery: SaAmfRecommendedRecoveryT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfPmStop(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        stopQualifier: SaAmfPmStopQualifierT,
        processId: SaInt64T,
        pmErrors: SaAmfPmErrorsT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfHealthcheckStart(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        healthcheckKey: *const SaAmfHealthcheckKeyT,
        invocationType: SaAmfHealthcheckInvocationT,
        recommendedRecovery: SaAmfRecommendedRecoveryT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfHealthcheckConfirm(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        healthcheckKey: *const SaAmfHealthcheckKeyT,
        healthcheckResult: SaAisErrorT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfHealthcheckStop(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        healthcheckKey: *const SaAmfHealthcheckKeyT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfCSIQuiescingComplete(
        amfHandle: SaAmfHandleT,
        invocation: SaInvocationT,
        error: SaAisErrorT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfHAStateGet(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        csiName: *const SaNameT,
        haState: *mut SaAmfHAStateT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfProtectionGroupTrack(
        amfHandle: SaAmfHandleT,
        csiName: *const SaNameT,
        trackFlags: SaUint8T,
        notificationBuffer: *mut SaAmfProtectionGroupNotificationBufferT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfProtectionGroupTrackStop(
        amfHandle: SaAmfHandleT,
        csiName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfComponentErrorReport(
        amfHandle: SaAmfHandleT,
        erroneousComponent: *const SaNameT,
        errorDetectionTime: SaTimeT,
        recommendedRecovery: SaAmfRecommendedRecoveryT,
        ntfIdentifier: SaNtfIdentifierT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfComponentErrorClear(
        amfHandle: SaAmfHandleT,
        compName: *const SaNameT,
        ntfIdentifier: SaNtfIdentifierT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saAmfResponse(
        amfHandle: SaAmfHandleT,
        invocation: SaInvocationT,
        error: SaAisErrorT,
    ) -> SaAisErrorT;
}
