pub use crate::clBindings::clCommon::*;
/* automatically generated by rust-bindgen 0.66.1 */

pub const CL_POOL_MAX_SIZE: u32 = 0;
pub const CL_POOL_ALIGNMENT: u32 = 8;
pub const CL_POOL_ALIGNMENT_MASK: u32 = 7;
#[doc = "  Data Types"]
pub type ClPoolT = ClPtrT;
pub type ClExtendedPoolT = ClPtrT;
pub const ClPoolFlagsT_CL_POOL_DEFAULT_FLAG: ClPoolFlagsT = 0;
pub const ClPoolFlagsT_CL_POOL_LAZY_FLAG: ClPoolFlagsT = 1;
pub const ClPoolFlagsT_CL_POOL_DEBUG_FLAG: ClPoolFlagsT = 2;
pub type ClPoolFlagsT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ClPoolConfig {
    pub chunkSize: ClUint32T,
    pub initialPoolSize: ClUint32T,
    pub incrementPoolSize: ClUint32T,
    pub maxPoolSize: ClUint32T,
}
#[test]
fn bindgen_test_layout_ClPoolConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ClPoolConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClPoolConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ClPoolConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ClPoolConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(ClPoolConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunkSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolConfig),
            "::",
            stringify!(chunkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialPoolSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolConfig),
            "::",
            stringify!(initialPoolSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).incrementPoolSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolConfig),
            "::",
            stringify!(incrementPoolSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPoolSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolConfig),
            "::",
            stringify!(maxPoolSize)
        )
    );
}
pub type ClPoolConfigT = ClPoolConfig;
#[repr(C)]
pub struct ClPoolStats {
    pub poolConfig: ClPoolConfigT,
    pub numExtendedPools: ClUint32T,
    pub maxNumExtendedPools: ClUint32T,
    pub numAllocs: ClUint32T,
    pub numFrees: ClUint32T,
    pub maxNumAllocs: ClUint32T,
}
#[test]
fn bindgen_test_layout_ClPoolStats() {
    const UNINIT: ::std::mem::MaybeUninit<ClPoolStats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClPoolStats>(),
        36usize,
        concat!("Size of: ", stringify!(ClPoolStats))
    );
    assert_eq!(
        ::std::mem::align_of::<ClPoolStats>(),
        4usize,
        concat!("Alignment of ", stringify!(ClPoolStats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolStats),
            "::",
            stringify!(poolConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtendedPools) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolStats),
            "::",
            stringify!(numExtendedPools)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumExtendedPools) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolStats),
            "::",
            stringify!(maxNumExtendedPools)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAllocs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolStats),
            "::",
            stringify!(numAllocs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numFrees) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolStats),
            "::",
            stringify!(numFrees)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumAllocs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolStats),
            "::",
            stringify!(maxNumAllocs)
        )
    );
}
pub type ClPoolStatsT = ClPoolStats;
pub const ClPoolShrinkFlagsT_CL_POOL_SHRINK_DEFAULT: ClPoolShrinkFlagsT = 0;
pub const ClPoolShrinkFlagsT_CL_POOL_SHRINK_ONE: ClPoolShrinkFlagsT = 1;
pub const ClPoolShrinkFlagsT_CL_POOL_SHRINK_ALL: ClPoolShrinkFlagsT = 2;
pub type ClPoolShrinkFlagsT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClPoolShrinkOptions {
    pub shrinkFlags: ClPoolShrinkFlagsT,
}
#[test]
fn bindgen_test_layout_ClPoolShrinkOptions() {
    const UNINIT: ::std::mem::MaybeUninit<ClPoolShrinkOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClPoolShrinkOptions>(),
        4usize,
        concat!("Size of: ", stringify!(ClPoolShrinkOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<ClPoolShrinkOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(ClPoolShrinkOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shrinkFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClPoolShrinkOptions),
            "::",
            stringify!(shrinkFlags)
        )
    );
}
pub type ClPoolShrinkOptionsT = ClPoolShrinkOptions;
extern "C" {
    pub fn clPoolCreate(
        pHandle: *mut ClPoolT,
        flags: ClPoolFlagsT,
        pPoolConfig: *const ClPoolConfigT,
    ) -> ClRcT;
}
extern "C" {
    pub fn clPoolDestroy(poolHandle: ClPoolT) -> ClRcT;
}
extern "C" {
    pub fn clPoolShrink(poolHandle: ClPoolT, pShrinkOptions: *const ClPoolShrinkOptionsT) -> ClRcT;
}
extern "C" {
    pub fn clPoolAllocate(
        poolHandle: ClPoolT,
        ppChunk: *mut *mut ClUint8T,
        ppCookie: *mut *mut ::std::os::raw::c_void,
    ) -> ClRcT;
}
extern "C" {
    pub fn clPoolFree(pChunk: *mut ClUint8T, pCookie: *mut ::std::os::raw::c_void) -> ClRcT;
}
extern "C" {
    pub fn clPoolStatsGet(pool: ClPoolT, pPoolStats: *mut ClPoolStatsT) -> ClRcT;
}
extern "C" {
    pub fn clPoolChunkSizeGet(pCookie: *mut ::std::os::raw::c_void, pSize: *mut ClUint32T)
        -> ClRcT;
}
extern "C" {
    pub fn clPoolStartGet(
        pCookie: *mut ::std::os::raw::c_void,
        ppAddress: *mut *mut ::std::os::raw::c_void,
    ) -> ClRcT;
}
extern "C" {
    pub fn clPoolDestroyForce(poolHandle: ClPoolT) -> ClRcT;
}
extern "C" {
    pub fn clHeapReferenceLargeChunk(chunk: ClPtrT, size: ClUint32T) -> ClRcT;
}
