/* automatically generated by rust-bindgen 0.66.1 */

pub const SA_TIME_END: u64 = 9223372036854775807;
pub const SA_TIME_BEGIN: u32 = 0;
pub const SA_TIME_UNKNOWN: i64 = -9223372036854775808;
pub const SA_TIME_ONE_MICROSECOND: u32 = 1000;
pub const SA_TIME_ONE_MILLISECOND: u32 = 1000000;
pub const SA_TIME_ONE_SECOND: u32 = 1000000000;
pub const SA_TIME_ONE_MINUTE: u64 = 60000000000;
pub const SA_TIME_ONE_HOUR: u64 = 3600000000000;
pub const SA_TIME_ONE_DAY: u64 = 86400000000000;
pub const SA_TIME_MAX: u64 = 9223372036854775807;
pub const SA_MAX_NAME_LENGTH: u32 = 256;
pub const SA_TRACK_CURRENT: u32 = 1;
pub const SA_TRACK_CHANGES: u32 = 2;
pub const SA_TRACK_CHANGES_ONLY: u32 = 4;
pub const SA_TRACK_LOCAL: u32 = 8;
pub const SA_TRACK_START_STEP: u32 = 16;
pub const SA_TRACK_VALIDATE_STEP: u32 = 32;
pub type SaInt8T = ::std::os::raw::c_char;
pub type SaInt16T = ::std::os::raw::c_short;
pub type SaInt32T = ::std::os::raw::c_int;
pub type SaInt64T = ::std::os::raw::c_longlong;
pub type SaUint8T = ::std::os::raw::c_uchar;
pub type SaUint16T = ::std::os::raw::c_ushort;
pub type SaUint32T = ::std::os::raw::c_uint;
pub type SaUint64T = ::std::os::raw::c_ulonglong;
#[doc = " Types used by the NTF/IMMS service"]
pub type SaFloatT = f32;
pub type SaDoubleT = f64;
pub type SaStringT = *mut ::std::os::raw::c_char;
pub type SaTimeT = SaInt64T;
pub type SaInvocationT = SaUint64T;
pub type SaSizeT = SaUint64T;
pub type SaOffsetT = SaUint64T;
pub type SaSelectionObjectT = SaUint64T;
pub const SaBoolT_SA_FALSE: SaBoolT = 0;
pub const SaBoolT_SA_TRUE: SaBoolT = 1;
pub type SaBoolT = ::std::os::raw::c_uint;
pub const SaDispatchFlagsT_SA_DISPATCH_ONE: SaDispatchFlagsT = 1;
pub const SaDispatchFlagsT_SA_DISPATCH_ALL: SaDispatchFlagsT = 2;
pub const SaDispatchFlagsT_SA_DISPATCH_BLOCKING: SaDispatchFlagsT = 3;
pub type SaDispatchFlagsT = ::std::os::raw::c_uint;
pub const SaAisErrorT_SA_AIS_OK: SaAisErrorT = 1;
pub const SaAisErrorT_SA_AIS_ERR_LIBRARY: SaAisErrorT = 2;
pub const SaAisErrorT_SA_AIS_ERR_VERSION: SaAisErrorT = 3;
pub const SaAisErrorT_SA_AIS_ERR_INIT: SaAisErrorT = 4;
pub const SaAisErrorT_SA_AIS_ERR_TIMEOUT: SaAisErrorT = 5;
pub const SaAisErrorT_SA_AIS_ERR_TRY_AGAIN: SaAisErrorT = 6;
pub const SaAisErrorT_SA_AIS_ERR_INVALID_PARAM: SaAisErrorT = 7;
pub const SaAisErrorT_SA_AIS_ERR_NO_MEMORY: SaAisErrorT = 8;
pub const SaAisErrorT_SA_AIS_ERR_BAD_HANDLE: SaAisErrorT = 9;
pub const SaAisErrorT_SA_AIS_ERR_BUSY: SaAisErrorT = 10;
pub const SaAisErrorT_SA_AIS_ERR_ACCESS: SaAisErrorT = 11;
pub const SaAisErrorT_SA_AIS_ERR_NOT_EXIST: SaAisErrorT = 12;
pub const SaAisErrorT_SA_AIS_ERR_NAME_TOO_LONG: SaAisErrorT = 13;
pub const SaAisErrorT_SA_AIS_ERR_EXIST: SaAisErrorT = 14;
pub const SaAisErrorT_SA_AIS_ERR_NO_SPACE: SaAisErrorT = 15;
pub const SaAisErrorT_SA_AIS_ERR_INTERRUPT: SaAisErrorT = 16;
pub const SaAisErrorT_SA_AIS_ERR_NAME_NOT_FOUND: SaAisErrorT = 17;
pub const SaAisErrorT_SA_AIS_ERR_NO_RESOURCES: SaAisErrorT = 18;
pub const SaAisErrorT_SA_AIS_ERR_NOT_SUPPORTED: SaAisErrorT = 19;
pub const SaAisErrorT_SA_AIS_ERR_BAD_OPERATION: SaAisErrorT = 20;
pub const SaAisErrorT_SA_AIS_ERR_FAILED_OPERATION: SaAisErrorT = 21;
pub const SaAisErrorT_SA_AIS_ERR_MESSAGE_ERROR: SaAisErrorT = 22;
pub const SaAisErrorT_SA_AIS_ERR_QUEUE_FULL: SaAisErrorT = 23;
pub const SaAisErrorT_SA_AIS_ERR_QUEUE_NOT_AVAILABLE: SaAisErrorT = 24;
pub const SaAisErrorT_SA_AIS_ERR_BAD_FLAGS: SaAisErrorT = 25;
pub const SaAisErrorT_SA_AIS_ERR_TOO_BIG: SaAisErrorT = 26;
pub const SaAisErrorT_SA_AIS_ERR_NO_SECTIONS: SaAisErrorT = 27;
pub const SaAisErrorT_SA_AIS_ERR_NO_OP: SaAisErrorT = 28;
pub const SaAisErrorT_SA_AIS_ERR_REPAIR_PENDING: SaAisErrorT = 29;
pub const SaAisErrorT_SA_AIS_ERR_NO_BINDINGS: SaAisErrorT = 30;
pub const SaAisErrorT_SA_AIS_ERR_UNAVAILABLE: SaAisErrorT = 31;
pub const SaAisErrorT_SA_AIS_ERR_CAMPAIGN_ERROR_DETECTED: SaAisErrorT = 32;
pub const SaAisErrorT_SA_AIS_ERR_CAMPAIGN_PROC_FAILED: SaAisErrorT = 33;
pub const SaAisErrorT_SA_AIS_ERR_CAMPAIGN_CANCELED: SaAisErrorT = 34;
pub const SaAisErrorT_SA_AIS_ERR_CAMPAIGN_FAILED: SaAisErrorT = 35;
pub const SaAisErrorT_SA_AIS_ERR_CAMPAIGN_SUSPENDED: SaAisErrorT = 36;
pub const SaAisErrorT_SA_AIS_ERR_CAMPAIGN_SUSPENDING: SaAisErrorT = 37;
pub const SaAisErrorT_SA_AIS_ERR_ACCESS_DENIED: SaAisErrorT = 38;
pub const SaAisErrorT_SA_AIS_ERR_NOT_READY: SaAisErrorT = 39;
pub const SaAisErrorT_SA_AIS_ERR_DEPLOYMENT: SaAisErrorT = 40;
pub type SaAisErrorT = ::std::os::raw::c_uint;
pub const SaServicesT_SA_SVC_HPI: SaServicesT = 1;
pub const SaServicesT_SA_SVC_AMF: SaServicesT = 2;
pub const SaServicesT_SA_SVC_CLM: SaServicesT = 3;
pub const SaServicesT_SA_SVC_CKPT: SaServicesT = 4;
pub const SaServicesT_SA_SVC_EVT: SaServicesT = 5;
pub const SaServicesT_SA_SVC_MSG: SaServicesT = 6;
pub const SaServicesT_SA_SVC_LCK: SaServicesT = 7;
pub const SaServicesT_SA_SVC_IMMS: SaServicesT = 8;
pub const SaServicesT_SA_SCV_LOG: SaServicesT = 9;
pub const SaServicesT_SA_SVC_NTF: SaServicesT = 10;
pub const SaServicesT_SA_SVC_NAM: SaServicesT = 11;
pub const SaServicesT_SA_SVC_TMR: SaServicesT = 12;
pub const SaServicesT_SA_SVC_SMF: SaServicesT = 13;
pub const SaServicesT_SA_SVC_SEC: SaServicesT = 14;
pub const SaServicesT_SA_SVC_PLM: SaServicesT = 15;
pub type SaServicesT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaAnyT {
    pub bufferSize: SaSizeT,
    pub bufferAddr: *mut SaUint8T,
}
#[test]
fn bindgen_test_layout_SaAnyT() {
    const UNINIT: ::std::mem::MaybeUninit<SaAnyT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaAnyT>(),
        16usize,
        concat!("Size of: ", stringify!(SaAnyT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaAnyT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaAnyT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAnyT),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaAnyT),
            "::",
            stringify!(bufferAddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaNameT {
    pub length: SaUint16T,
    pub value: [SaUint8T; 256usize],
}
#[test]
fn bindgen_test_layout_SaNameT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNameT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNameT>(),
        258usize,
        concat!("Size of: ", stringify!(SaNameT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNameT>(),
        2usize,
        concat!("Alignment of ", stringify!(SaNameT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNameT),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNameT),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaVersionT {
    pub releaseCode: SaUint8T,
    pub majorVersion: SaUint8T,
    pub minorVersion: SaUint8T,
}
#[test]
fn bindgen_test_layout_SaVersionT() {
    const UNINIT: ::std::mem::MaybeUninit<SaVersionT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaVersionT>(),
        3usize,
        concat!("Size of: ", stringify!(SaVersionT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaVersionT>(),
        1usize,
        concat!("Alignment of ", stringify!(SaVersionT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).releaseCode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaVersionT),
            "::",
            stringify!(releaseCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).majorVersion) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SaVersionT),
            "::",
            stringify!(majorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minorVersion) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SaVersionT),
            "::",
            stringify!(minorVersion)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SaLimitValueT {
    pub int64Value: SaInt64T,
    pub uint64Value: SaUint64T,
    pub timeValue: SaTimeT,
    pub floatValue: SaFloatT,
    pub doubleValue: SaDoubleT,
}
#[test]
fn bindgen_test_layout_SaLimitValueT() {
    const UNINIT: ::std::mem::MaybeUninit<SaLimitValueT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaLimitValueT>(),
        8usize,
        concat!("Size of: ", stringify!(SaLimitValueT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaLimitValueT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaLimitValueT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64Value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaLimitValueT),
            "::",
            stringify!(int64Value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64Value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaLimitValueT),
            "::",
            stringify!(uint64Value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaLimitValueT),
            "::",
            stringify!(timeValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaLimitValueT),
            "::",
            stringify!(floatValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doubleValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaLimitValueT),
            "::",
            stringify!(doubleValue)
        )
    );
}
