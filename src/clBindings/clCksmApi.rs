pub use crate::clBindings::clCommon::*;
/* automatically generated by rust-bindgen 0.66.1 */

extern "C" {
    #[doc = "  \\page pageCksm101 clCksm16bitCompute\n\n  \\par Synopsis:\n   Computes a 16-bit CheckSum.\n\n  \\par Description:\n   This API is used to compute a 16-bit CheckSum.\n\n  \\par Syntax:\n  \\code \tClRcT clCksm16bitCompute(\n                              ClUint8T *pData,\n\t\t\t\tClUint32T length,\n\t\t\t\tClUint16T *pCheckSum);\n  \\endcode\n\n  \\param pData: Data for which CheckSum is being computed.\n  This must be a valid pointer and cannot be NULL.\n\n  \\param length: Length of the data.\n\n  \\param pCheckSum: (out) Location where the computed CheckSum would be stored\n  This must be a valid pointer and cannot be NULL.\n\n  \\retval CL_OK: The API executed successfully.\n  \\retval CL_ERR_NULL_POINTER: On passing a NULL pointer.\n"]
    pub fn clCksm16bitCompute(
        pData: *mut ClUint8T,
        length: ClUint32T,
        pCheckSum: *mut ClUint16T,
    ) -> ClRcT;
}
extern "C" {
    #[doc = "  \\page pageCksm102 clCksm32bitCompute\n\n  \\par Synopsis:\n   Computes a 32-bit CheckSum.\n\n  \\par Description:\n   This API is used to compute a 32-bit CheckSum.\n\n  \\par Syntax:\n  \\code \tClRcT clCksm32bitCompute(\n                              ClUint8T *pData,\n\t\t\t\tClUint32T length,\n\t\t        \tClUint32T *pCheckSum)\n  \\endcode\n\n  \\param pData: Data for which CheckSum is being computed.\n  This must be a valid pointer and cannot be NULL.\n\n  \\param length: Length of the data.\n\n  \\param pCheckSum: (out) Location where the computed CheckSum would be stored\n  This must be a valid pointer and cannot be NULL.\n\n  \\retval CL_OK: The API executed successfully.\n  \\retval CL_ERR_NULL_POINTER: On passing a NULL pointer.\n"]
    pub fn clCksm32bitCompute(
        pData: *mut ClUint8T,
        length: ClUint32T,
        pCheckSum: *mut ClUint32T,
    ) -> ClRcT;
}
extern "C" {
    pub fn clCrc32bitCompute(
        buf: *mut ClUint8T,
        nr: ClInt32T,
        cval: *mut ClUint32T,
        clen: *mut ClUint32T,
    ) -> ClRcT;
}
