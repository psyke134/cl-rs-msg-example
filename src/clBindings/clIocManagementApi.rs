pub use crate::clBindings::clCommon::*;
pub use crate::clBindings::clBufferApi::*;
pub use crate::clBindings::clIocTransportApi::*;
pub use crate::clBindings::clIocApi::*;
pub use crate::clBindings::clHash::*;
pub use crate::clBindings::clList::*;
/* automatically generated by rust-bindgen 0.66.1 */

pub const CL_IOC_ROUTE_FLAGS_SAME_LINK: u32 = 255;
pub const CL_IOC_ROUTE_UP: u32 = 1;
pub const CL_IOC_ROUTE_DOWN: u32 = 0;
pub const CL_IOC_MIN_RECV_Q_SIZE: u32 = 32768;
pub const CL_IOC_MAX_RECV_Q_SIZE: u32 = 1048576;
pub const CL_IOC_STATIC_ENTRY: u32 = 1;
pub const CL_IOC_DYNAMIC_ENTRY: u32 = 0;
pub type ClIocHeartBeatLinkIndex = ClUint32T;
#[repr(C)]
pub struct ClIocRouteParam {
    pub destAddr: ClIocNodeAddressT,
    pub nextHop: ClIocNodeAddressT,
    pub prefixLen: ClUint16T,
    pub metrics: ClUint16T,
    pub pXportName: *mut ClCharT,
    pub pLinkName: *mut ClCharT,
    pub flags: ClUint8T,
    pub version: ClUint8T,
    pub status: ClUint8T,
    pub entryType: ClUint8T,
}
#[test]
fn bindgen_test_layout_ClIocRouteParam() {
    const UNINIT: ::std::mem::MaybeUninit<ClIocRouteParam> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClIocRouteParam>(),
        40usize,
        concat!("Size of: ", stringify!(ClIocRouteParam))
    );
    assert_eq!(
        ::std::mem::align_of::<ClIocRouteParam>(),
        8usize,
        concat!("Alignment of ", stringify!(ClIocRouteParam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destAddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(destAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextHop) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(nextHop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefixLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(prefixLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metrics) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(metrics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pXportName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(pXportName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLinkName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(pLinkName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entryType) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocRouteParam),
            "::",
            stringify!(entryType)
        )
    );
}
pub type ClIocRouteParamT = ClIocRouteParam;
#[repr(C)]
pub struct ClIocArpParam {
    pub iocAddr: ClIocNodeAddressT,
    pub pTransportAddr: *mut ClUint8T,
    pub addrSize: ClUint32T,
    pub pXportName: *mut ClCharT,
    pub pLinkName: *mut ClCharT,
    pub status: ClUint8T,
    pub entryType: ClUint8T,
}
#[test]
fn bindgen_test_layout_ClIocArpParam() {
    const UNINIT: ::std::mem::MaybeUninit<ClIocArpParam> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClIocArpParam>(),
        48usize,
        concat!("Size of: ", stringify!(ClIocArpParam))
    );
    assert_eq!(
        ::std::mem::align_of::<ClIocArpParam>(),
        8usize,
        concat!("Alignment of ", stringify!(ClIocArpParam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iocAddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocArpParam),
            "::",
            stringify!(iocAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTransportAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocArpParam),
            "::",
            stringify!(pTransportAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocArpParam),
            "::",
            stringify!(addrSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pXportName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocArpParam),
            "::",
            stringify!(pXportName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLinkName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocArpParam),
            "::",
            stringify!(pLinkName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocArpParam),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entryType) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocArpParam),
            "::",
            stringify!(entryType)
        )
    );
}
pub type ClIocArpParamT = ClIocArpParam;
#[repr(C)]
pub struct ClIocHeartBeatStatus {
    pub linkIndex: ClIocHeartBeatLinkIndex,
    pub status: ClUint8T,
    pub retryCount: ClUint8T,
    pub hash: hashStruct,
    pub list: ClListHeadT,
}
#[test]
fn bindgen_test_layout_ClIocHeartBeatStatus() {
    const UNINIT: ::std::mem::MaybeUninit<ClIocHeartBeatStatus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClIocHeartBeatStatus>(),
        40usize,
        concat!("Size of: ", stringify!(ClIocHeartBeatStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<ClIocHeartBeatStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(ClIocHeartBeatStatus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linkIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocHeartBeatStatus),
            "::",
            stringify!(linkIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocHeartBeatStatus),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retryCount) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocHeartBeatStatus),
            "::",
            stringify!(retryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocHeartBeatStatus),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocHeartBeatStatus),
            "::",
            stringify!(list)
        )
    );
}
pub type ClIocHeartBeatStatusT = ClIocHeartBeatStatus;
extern "C" {
    pub fn clIocCommPortWaterMarksGet(
        commPort: ClUint32T,
        pLowWaterMark: *mut ClUint64T,
        pHighWaterMark: *mut ClUint64T,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocCommPortWaterMarksSet(
        commPort: ClUint32T,
        lowWaterMark: ClUint32T,
        highWaterMark: ClUint32T,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocRouteInsert(pRouteInfo: *mut ClIocRouteParamT) -> ClRcT;
}
extern "C" {
    pub fn clIocRouteDelete(destAddr: ClIocNodeAddressT, prefixLen: ClUint16T) -> ClRcT;
}
extern "C" {
    pub fn clIocRouteTablePrint() -> ClRcT;
}
extern "C" {
    pub fn clIocArpInsert(pArpInfo: *mut ClIocArpParamT) -> ClRcT;
}
extern "C" {
    pub fn clIocArpDelete(
        iocAddr: ClIocNodeAddressT,
        pXportName: *mut ClCharT,
        pLinkName: *mut ClCharT,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocArpTablePrint() -> ClRcT;
}
extern "C" {
    pub fn clIocLinkStatusGet(
        pXportName: *mut ClCharT,
        pLinkName: *mut ClCharT,
        pStatus: *mut ClUint8T,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocLinkStatusSet(
        pXportName: *mut ClCharT,
        pLinkName: *mut ClCharT,
        status: ClUint8T,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatStart() -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatStop() -> ClRcT;
}
extern "C" {
    pub fn clIocCommPortQueueSizeSet(portId: ClIocCommPortHandleT, queueSize: ClUint32T) -> ClRcT;
}
extern "C" {
    pub fn clIocCommPortQueueStatsGet(
        portId: ClIocCommPortHandleT,
        pQueueStats: *mut ClIocQueueStatsT,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocNodeQueueWaterMarksSet(queueId: ClIocQueueIdT, pWM: *mut ClWaterMarkT) -> ClRcT;
}
extern "C" {
    pub fn clIocNodeQueueSizeSet(queueId: ClIocQueueIdT, queueSize: ClUint32T) -> ClRcT;
}
extern "C" {
    pub fn clIocNodeQueueStatsGet(
        pSendQStats: *mut ClIocQueueStatsT,
        pRecvQStats: *mut ClIocQueueStatsT,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocHearBeatHealthCheckUpdate(
        nodeAddr: ClIocNodeAddressT,
        portId: ClUint32T,
        message: *mut ClCharT,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatInitialize(nodeRep: ClBoolT) -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatFinalize(nodeRep: ClBoolT) -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatMessageReqRep(
        commPort: ClIocCommPortHandleT,
        destAddress: *mut ClIocAddressT,
        reqRep: ClUint32T,
        shutdown: ClBoolT,
    ) -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatPause() -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatUnpause() -> ClRcT;
}
extern "C" {
    pub fn clIocHeartBeatIsRunning() -> ClBoolT;
}
extern "C" {
    pub fn clIocHeartBeatStatusGet() -> *const ClCharT;
}
