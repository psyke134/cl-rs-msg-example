pub use crate::clBindings::saAis::*;
/* automatically generated by rust-bindgen 0.66.1 */

pub const SA_MSG_MESSAGE_DELIVERED_ACK: u32 = 1;
pub const SA_MSG_QUEUE_PERSISTENT: u32 = 1;
pub const SA_MSG_MESSAGE_HIGHEST_PRIORITY: u32 = 0;
pub const SA_MSG_MESSAGE_LOWEST_PRIORITY: u32 = 3;
pub const SA_MSG_QUEUE_CREATE: u32 = 1;
pub const SA_MSG_QUEUE_RECEIVE_CALLBACK: u32 = 2;
pub const SA_MSG_QUEUE_EMPTY: u32 = 4;
pub type SaMsgHandleT = SaUint64T;
pub type SaMsgQueueHandleT = SaUint64T;
pub type SaMsgSenderIdT = SaUint64T;
pub type SaMsgAckFlagsT = SaUint32T;
pub type SaMsgQueueCreationFlagsT = SaUint32T;
#[repr(C)]
pub struct SaMsgQueueCreationAttributesT {
    pub creationFlags: SaMsgQueueCreationFlagsT,
    pub size: [SaSizeT; 4usize],
    pub retentionTime: SaTimeT,
}
#[test]
fn bindgen_test_layout_SaMsgQueueCreationAttributesT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgQueueCreationAttributesT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgQueueCreationAttributesT>(),
        48usize,
        concat!("Size of: ", stringify!(SaMsgQueueCreationAttributesT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgQueueCreationAttributesT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaMsgQueueCreationAttributesT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creationFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueCreationAttributesT),
            "::",
            stringify!(creationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueCreationAttributesT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retentionTime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueCreationAttributesT),
            "::",
            stringify!(retentionTime)
        )
    );
}
pub const SaMsgQueueGroupPolicyT_SA_MSG_QUEUE_GROUP_ROUND_ROBIN: SaMsgQueueGroupPolicyT = 1;
pub const SaMsgQueueGroupPolicyT_SA_MSG_QUEUE_GROUP_LOCAL_ROUND_ROBIN: SaMsgQueueGroupPolicyT = 2;
pub const SaMsgQueueGroupPolicyT_SA_MSG_QUEUE_GROUP_LOCAL_BEST_QUEUE: SaMsgQueueGroupPolicyT = 3;
pub const SaMsgQueueGroupPolicyT_SA_MSG_QUEUE_GROUP_BROADCAST: SaMsgQueueGroupPolicyT = 4;
pub type SaMsgQueueGroupPolicyT = ::std::os::raw::c_uint;
pub type SaMsgQueueOpenFlagsT = SaUint32T;
#[repr(C)]
pub struct SaMsgQueueUsageT {
    pub queueSize: SaSizeT,
    pub queueUsed: SaSizeT,
    pub numberOfMessages: SaUint32T,
}
#[test]
fn bindgen_test_layout_SaMsgQueueUsageT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgQueueUsageT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgQueueUsageT>(),
        24usize,
        concat!("Size of: ", stringify!(SaMsgQueueUsageT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgQueueUsageT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaMsgQueueUsageT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueUsageT),
            "::",
            stringify!(queueSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueUsed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueUsageT),
            "::",
            stringify!(queueUsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberOfMessages) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueUsageT),
            "::",
            stringify!(numberOfMessages)
        )
    );
}
#[repr(C)]
pub struct SaMsgQueueStatusT {
    pub creationFlags: SaMsgQueueCreationFlagsT,
    pub retentionTime: SaTimeT,
    pub closeTime: SaTimeT,
    pub saMsgQueueUsage: [SaMsgQueueUsageT; 4usize],
}
#[test]
fn bindgen_test_layout_SaMsgQueueStatusT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgQueueStatusT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgQueueStatusT>(),
        120usize,
        concat!("Size of: ", stringify!(SaMsgQueueStatusT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgQueueStatusT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaMsgQueueStatusT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creationFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueStatusT),
            "::",
            stringify!(creationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retentionTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueStatusT),
            "::",
            stringify!(retentionTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closeTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueStatusT),
            "::",
            stringify!(closeTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saMsgQueueUsage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueStatusT),
            "::",
            stringify!(saMsgQueueUsage)
        )
    );
}
pub const SaMsgQueueGroupChangesT_SA_MSG_QUEUE_GROUP_NO_CHANGE: SaMsgQueueGroupChangesT = 1;
pub const SaMsgQueueGroupChangesT_SA_MSG_QUEUE_GROUP_ADDED: SaMsgQueueGroupChangesT = 2;
pub const SaMsgQueueGroupChangesT_SA_MSG_QUEUE_GROUP_REMOVED: SaMsgQueueGroupChangesT = 3;
pub const SaMsgQueueGroupChangesT_SA_MSG_QUEUE_GROUP_STATE_CHANGED: SaMsgQueueGroupChangesT = 4;
pub type SaMsgQueueGroupChangesT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaMsgQueueGroupMemberT {
    pub queueName: SaNameT,
}
#[test]
fn bindgen_test_layout_SaMsgQueueGroupMemberT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgQueueGroupMemberT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgQueueGroupMemberT>(),
        258usize,
        concat!("Size of: ", stringify!(SaMsgQueueGroupMemberT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgQueueGroupMemberT>(),
        2usize,
        concat!("Alignment of ", stringify!(SaMsgQueueGroupMemberT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueGroupMemberT),
            "::",
            stringify!(queueName)
        )
    );
}
#[repr(C)]
pub struct SaMsgQueueGroupNotificationT {
    pub member: SaMsgQueueGroupMemberT,
    pub change: SaMsgQueueGroupChangesT,
}
#[test]
fn bindgen_test_layout_SaMsgQueueGroupNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgQueueGroupNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgQueueGroupNotificationT>(),
        264usize,
        concat!("Size of: ", stringify!(SaMsgQueueGroupNotificationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgQueueGroupNotificationT>(),
        4usize,
        concat!("Alignment of ", stringify!(SaMsgQueueGroupNotificationT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).member) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueGroupNotificationT),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).change) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueGroupNotificationT),
            "::",
            stringify!(change)
        )
    );
}
#[repr(C)]
pub struct SaMsgQueueGroupNotificationBufferT {
    pub numberOfItems: SaUint32T,
    pub notification: *mut SaMsgQueueGroupNotificationT,
    pub queueGroupPolicy: SaMsgQueueGroupPolicyT,
}
#[test]
fn bindgen_test_layout_SaMsgQueueGroupNotificationBufferT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgQueueGroupNotificationBufferT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgQueueGroupNotificationBufferT>(),
        24usize,
        concat!("Size of: ", stringify!(SaMsgQueueGroupNotificationBufferT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgQueueGroupNotificationBufferT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaMsgQueueGroupNotificationBufferT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberOfItems) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueGroupNotificationBufferT),
            "::",
            stringify!(numberOfItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notification) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueGroupNotificationBufferT),
            "::",
            stringify!(notification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueGroupPolicy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgQueueGroupNotificationBufferT),
            "::",
            stringify!(queueGroupPolicy)
        )
    );
}
#[repr(C)]
pub struct SaMsgMessageT {
    pub type_: SaUint32T,
    pub version: SaVersionT,
    pub size: SaSizeT,
    pub senderName: *mut SaNameT,
    pub data: *mut ::std::os::raw::c_void,
    pub priority: SaUint8T,
}
#[test]
fn bindgen_test_layout_SaMsgMessageT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgMessageT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgMessageT>(),
        40usize,
        concat!("Size of: ", stringify!(SaMsgMessageT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgMessageT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaMsgMessageT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgMessageT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgMessageT),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgMessageT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).senderName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgMessageT),
            "::",
            stringify!(senderName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgMessageT),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgMessageT),
            "::",
            stringify!(priority)
        )
    );
}
pub type SaMsgQueueOpenCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        invocation: SaInvocationT,
        queueHandle: SaMsgQueueHandleT,
        error: SaAisErrorT,
    ),
>;
pub type SaMsgQueueGroupTrackCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        queueGroupName: *const SaNameT,
        notificationBuffer: *const SaMsgQueueGroupNotificationBufferT,
        numberOfMembers: SaUint32T,
        error: SaAisErrorT,
    ),
>;
pub type SaMsgMessageDeliveredCallbackT =
    ::std::option::Option<unsafe extern "C" fn(invocation: SaInvocationT, error: SaAisErrorT)>;
pub type SaMsgMessageReceivedCallbackT =
    ::std::option::Option<unsafe extern "C" fn(queueHandle: SaMsgQueueHandleT)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaMsgCallbacksT {
    pub saMsgQueueOpenCallback: SaMsgQueueOpenCallbackT,
    pub saMsgQueueGroupTrackCallback: SaMsgQueueGroupTrackCallbackT,
    pub saMsgMessageDeliveredCallback: SaMsgMessageDeliveredCallbackT,
    pub saMsgMessageReceivedCallback: SaMsgMessageReceivedCallbackT,
}
#[test]
fn bindgen_test_layout_SaMsgCallbacksT() {
    const UNINIT: ::std::mem::MaybeUninit<SaMsgCallbacksT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaMsgCallbacksT>(),
        32usize,
        concat!("Size of: ", stringify!(SaMsgCallbacksT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaMsgCallbacksT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaMsgCallbacksT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saMsgQueueOpenCallback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgCallbacksT),
            "::",
            stringify!(saMsgQueueOpenCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saMsgQueueGroupTrackCallback) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgCallbacksT),
            "::",
            stringify!(saMsgQueueGroupTrackCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saMsgMessageDeliveredCallback) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgCallbacksT),
            "::",
            stringify!(saMsgMessageDeliveredCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saMsgMessageReceivedCallback) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaMsgCallbacksT),
            "::",
            stringify!(saMsgMessageReceivedCallback)
        )
    );
}
extern "C" {
    pub fn saMsgInitialize(
        msgHandle: *mut SaMsgHandleT,
        msgCallbacks: *const SaMsgCallbacksT,
        version: *mut SaVersionT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgSelectionObjectGet(
        msgHandle: SaMsgHandleT,
        selectionObject: *mut SaSelectionObjectT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgDispatch(msgHandle: SaMsgHandleT, dispatchFlags: SaDispatchFlagsT) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgFinalize(msgHandle: SaMsgHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueOpen(
        msgHandle: SaMsgHandleT,
        queueName: *const SaNameT,
        creationAttributes: *const SaMsgQueueCreationAttributesT,
        openFlags: SaMsgQueueOpenFlagsT,
        timeout: SaTimeT,
        queueHandle: *mut SaMsgQueueHandleT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueOpenAsync(
        msgHandle: SaMsgHandleT,
        invocation: SaInvocationT,
        queueName: *const SaNameT,
        creationAttributes: *const SaMsgQueueCreationAttributesT,
        openFlags: SaMsgQueueOpenFlagsT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueClose(queueHandle: SaMsgQueueHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueStatusGet(
        msgHandle: SaMsgQueueHandleT,
        queueName: *const SaNameT,
        queueStatus: *mut SaMsgQueueStatusT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueRetentionTimeSet(
        queueHandle: SaMsgQueueHandleT,
        retentionTime: *mut SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueUnlink(msgHandle: SaMsgQueueHandleT, queueName: *const SaNameT)
        -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueGroupCreate(
        msgHandle: SaMsgHandleT,
        queueGroupName: *const SaNameT,
        queueGroupPolicy: SaMsgQueueGroupPolicyT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueGroupInsert(
        msgHandle: SaMsgHandleT,
        queueGroupName: *const SaNameT,
        queueName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueGroupRemove(
        msgHandle: SaMsgHandleT,
        queueGroupName: *const SaNameT,
        queueName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueGroupDelete(
        msgHandle: SaMsgHandleT,
        queueGroupName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueGroupTrack(
        msgHandle: SaMsgHandleT,
        queueGroupName: *const SaNameT,
        trackFlags: SaUint8T,
        notificationBuffer: *mut SaMsgQueueGroupNotificationBufferT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueGroupTrackStop(
        msgHandle: SaMsgHandleT,
        queueGroupName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgQueueGroupNotificationFree(
        msgHandle: SaMsgHandleT,
        notification: *mut SaMsgQueueGroupNotificationT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageSend(
        msgHandle: SaMsgHandleT,
        destination: *const SaNameT,
        message: *const SaMsgMessageT,
        timeout: SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageSendAsync(
        msgHandle: SaMsgHandleT,
        invocation: SaInvocationT,
        destination: *const SaNameT,
        message: *const SaMsgMessageT,
        ackFlags: SaMsgAckFlagsT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageGet(
        queueHandle: SaMsgQueueHandleT,
        message: *mut SaMsgMessageT,
        sendTime: *mut SaTimeT,
        senderId: *mut SaMsgSenderIdT,
        timeout: SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageDataFree(
        msgHandle: SaMsgHandleT,
        pData: *mut ::std::os::raw::c_void,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageCancel(queueHandle: SaMsgQueueHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageSendReceive(
        msgHandle: SaMsgHandleT,
        destination: *const SaNameT,
        sendMessage: *const SaMsgMessageT,
        receiveMessage: *mut SaMsgMessageT,
        replySendTime: *mut SaTimeT,
        timeout: SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageReply(
        msgHandle: SaMsgHandleT,
        replyMessage: *const SaMsgMessageT,
        senderId: *const SaMsgSenderIdT,
        timeout: SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saMsgMessageReplyAsync(
        msgHandle: SaMsgHandleT,
        invocation: SaInvocationT,
        replyMessage: *const SaMsgMessageT,
        senderId: *const SaMsgSenderIdT,
        ackFlags: SaMsgAckFlagsT,
    ) -> SaAisErrorT;
}
