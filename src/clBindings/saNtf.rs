pub use crate::clBindings::saAis::*;
/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const SA_NTF_NOTIFICATIONS_TYPE_MASK: u32 = 61440;
pub const SA_NTF_OBJECT_CREATION_BIT: u32 = 1;
pub const SA_NTF_OBJECT_DELETION_BIT: u32 = 2;
pub const SA_NTF_ATTRIBUTE_ADDED_BIT: u32 = 4;
pub const SA_NTF_ATTRIBUTE_REMOVED_BIT: u32 = 8;
pub const SA_NTF_ATTRIBUTE_CHANGED_BIT: u32 = 16;
pub const SA_NTF_ATTRIBUTE_RESET_BIT: u32 = 32;
pub const SA_NTF_OBJECT_STATE_CHANGE_BIT: u32 = 64;
pub const SA_NTF_ALARM_COMMUNICATION_BIT: u32 = 128;
pub const SA_NTF_ALARM_QOS_BIT: u32 = 256;
pub const SA_NTF_ALARM_PROCESSING_BIT: u32 = 512;
pub const SA_NTF_ALARM_EQUIPMENT_BIT: u32 = 1024;
pub const SA_NTF_ALARM_ENVIRONMENT_BIT: u32 = 2048;
pub const SA_NTF_INTEGRITY_VIOLATION_BIT: u32 = 4096;
pub const SA_NTF_OPERATION_VIOLATION_BIT: u32 = 8192;
pub const SA_NTF_PHYSICAL_VIOLATION_BIT: u32 = 16384;
pub const SA_NTF_SECURITY_SERVICE_VIOLATION_BIT: u32 = 32768;
pub const SA_NTF_TIME_VIOLATION_BIT: u32 = 65536;
pub const SA_NTF_ADMIN_OPERATION_START_BIT: u32 = 131072;
pub const SA_NTF_ADMIN_OPERATION_END_BIT: u32 = 262144;
pub const SA_NTF_CONFIG_UPDATE_START_BIT: u32 = 524288;
pub const SA_NTF_CONFIG_UPDATE_END_BIT: u32 = 1048576;
pub const SA_NTF_ERROR_REPORT_BIT: u32 = 2097152;
pub const SA_NTF_ERROR_CLEAR_BIT: u32 = 4194304;
pub const SA_NTF_HPI_EVENT_RESOURCE_BIT: u32 = 8388608;
pub const SA_NTF_HPI_EVENT_SENSOR_BIT: u32 = 16777216;
pub const SA_NTF_HPI_EVENT_WATCHDOG_BIT: u32 = 33554432;
pub const SA_NTF_HPI_EVENT_DIMI_BIT: u32 = 67108864;
pub const SA_NTF_HPI_EVENT_FUMI_BIT: u32 = 134217728;
pub const SA_NTF_HPI_EVENT_OTHER_BIT: u32 = 268435456;
pub const SA_NTF_APPLICATION_EVENT_BIT: u64 = 17592186044416;
pub const SA_NTF_VENDOR_ID_SAF: u32 = 18568;
pub const SA_NTF_ALLOC_SYSTEM_LIMIT: i32 = -1;
pub type SaNtfHandleT = SaUint64T;
pub type SaNtfNotificationHandleT = SaUint64T;
pub type SaNtfNotificationFilterHandleT = SaUint64T;
pub type SaNtfReadHandleT = SaUint64T;
pub const SaNtfNotificationTypeT_SA_NTF_TYPE_OBJECT_CREATE_DELETE: SaNtfNotificationTypeT = 4096;
pub const SaNtfNotificationTypeT_SA_NTF_TYPE_ATTRIBUTE_CHANGE: SaNtfNotificationTypeT = 8192;
pub const SaNtfNotificationTypeT_SA_NTF_TYPE_STATE_CHANGE: SaNtfNotificationTypeT = 12288;
pub const SaNtfNotificationTypeT_SA_NTF_TYPE_ALARM: SaNtfNotificationTypeT = 16384;
pub const SaNtfNotificationTypeT_SA_NTF_TYPE_SECURITY_ALARM: SaNtfNotificationTypeT = 20480;
pub const SaNtfNotificationTypeT_SA_NTF_TYPE_MISCELLANEOUS: SaNtfNotificationTypeT = 24576;
pub type SaNtfNotificationTypeT = ::std::os::raw::c_uint;
pub const SaNtfEventTypeT_SA_NTF_OBJECT_NOTIFICATIONS_START: SaNtfEventTypeT = 4096;
pub const SaNtfEventTypeT_SA_NTF_OBJECT_CREATION: SaNtfEventTypeT = 4097;
pub const SaNtfEventTypeT_SA_NTF_OBJECT_DELETION: SaNtfEventTypeT = 4098;
pub const SaNtfEventTypeT_SA_NTF_ATTRIBUTE_NOTIFICATIONS_START: SaNtfEventTypeT = 8192;
pub const SaNtfEventTypeT_SA_NTF_ATTRIBUTE_ADDED: SaNtfEventTypeT = 8193;
pub const SaNtfEventTypeT_SA_NTF_ATTRIBUTE_REMOVED: SaNtfEventTypeT = 8194;
pub const SaNtfEventTypeT_SA_NTF_ATTRIBUTE_CHANGED: SaNtfEventTypeT = 8195;
pub const SaNtfEventTypeT_SA_NTF_ATTRIBUTE_RESET: SaNtfEventTypeT = 8196;
pub const SaNtfEventTypeT_SA_NTF_STATE_CHANGE_NOTIFICATIONS_START: SaNtfEventTypeT = 12288;
pub const SaNtfEventTypeT_SA_NTF_OBJECT_STATE_CHANGE: SaNtfEventTypeT = 12289;
pub const SaNtfEventTypeT_SA_NTF_ALARM_NOTIFICATIONS_START: SaNtfEventTypeT = 16384;
pub const SaNtfEventTypeT_SA_NTF_ALARM_COMMUNICATION: SaNtfEventTypeT = 16385;
pub const SaNtfEventTypeT_SA_NTF_ALARM_QOS: SaNtfEventTypeT = 16386;
pub const SaNtfEventTypeT_SA_NTF_ALARM_PROCESSING: SaNtfEventTypeT = 16387;
pub const SaNtfEventTypeT_SA_NTF_ALARM_EQUIPMENT: SaNtfEventTypeT = 16388;
pub const SaNtfEventTypeT_SA_NTF_ALARM_ENVIRONMENT: SaNtfEventTypeT = 16389;
pub const SaNtfEventTypeT_SA_NTF_SECURITY_ALARM_NOTIFICATIONS_START: SaNtfEventTypeT = 20480;
pub const SaNtfEventTypeT_SA_NTF_INTEGRITY_VIOLATION: SaNtfEventTypeT = 20481;
pub const SaNtfEventTypeT_SA_NTF_OPERATION_VIOLATION: SaNtfEventTypeT = 20482;
pub const SaNtfEventTypeT_SA_NTF_PHYSICAL_VIOLATION: SaNtfEventTypeT = 20483;
pub const SaNtfEventTypeT_SA_NTF_SECURITY_SERVICE_VIOLATION: SaNtfEventTypeT = 20484;
pub const SaNtfEventTypeT_SA_NTF_TIME_VIOLATION: SaNtfEventTypeT = 20485;
pub const SaNtfEventTypeT_SA_NTF_MISCELLANEOUS_NOTIFICATIONS_START: SaNtfEventTypeT = 24576;
pub const SaNtfEventTypeT_SA_NTF_APPLICATION_EVENT: SaNtfEventTypeT = 24577;
pub const SaNtfEventTypeT_SA_NTF_ADMIN_OPERATION_START: SaNtfEventTypeT = 24578;
pub const SaNtfEventTypeT_SA_NTF_ADMIN_OPERATION_END: SaNtfEventTypeT = 24579;
pub const SaNtfEventTypeT_SA_NTF_CONFIG_UPDATE_START: SaNtfEventTypeT = 24580;
pub const SaNtfEventTypeT_SA_NTF_CONFIG_UPDATE_END: SaNtfEventTypeT = 24581;
pub const SaNtfEventTypeT_SA_NTF_ERROR_REPORT: SaNtfEventTypeT = 24582;
pub const SaNtfEventTypeT_SA_NTF_ERROR_CLEAR: SaNtfEventTypeT = 24583;
pub const SaNtfEventTypeT_SA_NTF_HPI_EVENT_RESOURCE: SaNtfEventTypeT = 24584;
pub const SaNtfEventTypeT_SA_NTF_HPI_EVENT_SENSOR: SaNtfEventTypeT = 24585;
pub const SaNtfEventTypeT_SA_NTF_HPI_EVENT_WATCHDOG: SaNtfEventTypeT = 24586;
pub const SaNtfEventTypeT_SA_NTF_HPI_EVENT_DIMI: SaNtfEventTypeT = 24587;
pub const SaNtfEventTypeT_SA_NTF_HPI_EVENT_FUMI: SaNtfEventTypeT = 24588;
pub const SaNtfEventTypeT_SA_NTF_HPI_EVENT_OTHER: SaNtfEventTypeT = 24589;
pub type SaNtfEventTypeT = ::std::os::raw::c_uint;
pub type SaNtfEventTypeBitmapT = SaUint64T;
#[repr(C)]
pub struct SaNtfClassIdT {
    pub vendorId: SaUint32T,
    pub majorId: SaUint16T,
    pub minorId: SaUint16T,
}
#[test]
fn bindgen_test_layout_SaNtfClassIdT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfClassIdT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfClassIdT>(),
        8usize,
        concat!("Size of: ", stringify!(SaNtfClassIdT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfClassIdT>(),
        4usize,
        concat!("Alignment of ", stringify!(SaNtfClassIdT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfClassIdT),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).majorId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfClassIdT),
            "::",
            stringify!(majorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minorId) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfClassIdT),
            "::",
            stringify!(minorId)
        )
    );
}
pub type SaNtfElementIdT = SaUint16T;
pub type SaNtfIdentifierT = SaUint64T;
#[repr(C)]
pub struct SaNtfCorrelationIdsT {
    pub rootCorrelationId: SaNtfIdentifierT,
    pub parentCorrelationId: SaNtfIdentifierT,
    pub notificationId: SaNtfIdentifierT,
}
#[test]
fn bindgen_test_layout_SaNtfCorrelationIdsT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfCorrelationIdsT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfCorrelationIdsT>(),
        24usize,
        concat!("Size of: ", stringify!(SaNtfCorrelationIdsT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfCorrelationIdsT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfCorrelationIdsT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootCorrelationId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfCorrelationIdsT),
            "::",
            stringify!(rootCorrelationId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentCorrelationId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfCorrelationIdsT),
            "::",
            stringify!(parentCorrelationId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfCorrelationIdsT),
            "::",
            stringify!(notificationId)
        )
    );
}
pub const SaNtfValueTypeT_SA_NTF_VALUE_UINT8: SaNtfValueTypeT = 1;
pub const SaNtfValueTypeT_SA_NTF_VALUE_INT8: SaNtfValueTypeT = 2;
pub const SaNtfValueTypeT_SA_NTF_VALUE_UINT16: SaNtfValueTypeT = 3;
pub const SaNtfValueTypeT_SA_NTF_VALUE_INT16: SaNtfValueTypeT = 4;
pub const SaNtfValueTypeT_SA_NTF_VALUE_UINT32: SaNtfValueTypeT = 5;
pub const SaNtfValueTypeT_SA_NTF_VALUE_INT32: SaNtfValueTypeT = 6;
pub const SaNtfValueTypeT_SA_NTF_VALUE_FLOAT: SaNtfValueTypeT = 7;
pub const SaNtfValueTypeT_SA_NTF_VALUE_UINT64: SaNtfValueTypeT = 8;
pub const SaNtfValueTypeT_SA_NTF_VALUE_INT64: SaNtfValueTypeT = 9;
pub const SaNtfValueTypeT_SA_NTF_VALUE_DOUBLE: SaNtfValueTypeT = 10;
pub const SaNtfValueTypeT_SA_NTF_VALUE_LDAP_NAME: SaNtfValueTypeT = 11;
pub const SaNtfValueTypeT_SA_NTF_VALUE_STRING: SaNtfValueTypeT = 12;
pub const SaNtfValueTypeT_SA_NTF_VALUE_IPADDRESS: SaNtfValueTypeT = 13;
pub const SaNtfValueTypeT_SA_NTF_VALUE_BINARY: SaNtfValueTypeT = 14;
pub const SaNtfValueTypeT_SA_NTF_VALUE_ARRAY: SaNtfValueTypeT = 15;
pub type SaNtfValueTypeT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaNtfValueT {
    pub uint8Val: __BindgenUnionField<SaUint8T>,
    pub int8Val: __BindgenUnionField<SaInt8T>,
    pub uint16Val: __BindgenUnionField<SaUint16T>,
    pub int16Val: __BindgenUnionField<SaInt16T>,
    pub uint32Val: __BindgenUnionField<SaUint32T>,
    pub int32Val: __BindgenUnionField<SaInt32T>,
    pub floatVal: __BindgenUnionField<SaFloatT>,
    pub uint64Val: __BindgenUnionField<SaUint64T>,
    pub int64Val: __BindgenUnionField<SaInt64T>,
    pub doubleVal: __BindgenUnionField<SaDoubleT>,
    pub ptrVal: __BindgenUnionField<SaNtfValueT__bindgen_ty_1>,
    pub arrayVal: __BindgenUnionField<SaNtfValueT__bindgen_ty_2>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
pub struct SaNtfValueT__bindgen_ty_1 {
    pub dataOffset: SaUint16T,
    pub dataSize: SaUint16T,
}
#[test]
fn bindgen_test_layout_SaNtfValueT__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfValueT__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfValueT__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(SaNtfValueT__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfValueT__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(SaNtfValueT__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT__bindgen_ty_1),
            "::",
            stringify!(dataOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT__bindgen_ty_1),
            "::",
            stringify!(dataSize)
        )
    );
}
#[repr(C)]
pub struct SaNtfValueT__bindgen_ty_2 {
    pub arrayOffset: SaUint16T,
    pub numElements: SaUint16T,
    pub elementSize: SaUint16T,
}
#[test]
fn bindgen_test_layout_SaNtfValueT__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfValueT__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfValueT__bindgen_ty_2>(),
        6usize,
        concat!("Size of: ", stringify!(SaNtfValueT__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfValueT__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(SaNtfValueT__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT__bindgen_ty_2),
            "::",
            stringify!(arrayOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numElements) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT__bindgen_ty_2),
            "::",
            stringify!(numElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elementSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT__bindgen_ty_2),
            "::",
            stringify!(elementSize)
        )
    );
}
#[test]
fn bindgen_test_layout_SaNtfValueT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfValueT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfValueT>(),
        8usize,
        concat!("Size of: ", stringify!(SaNtfValueT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfValueT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfValueT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint8Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(uint8Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int8Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(int8Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint16Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(uint16Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(int16Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(uint32Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(int32Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(floatVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(uint64Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64Val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(int64Val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doubleVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(doubleVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(ptrVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayVal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfValueT),
            "::",
            stringify!(arrayVal)
        )
    );
}
#[repr(C)]
pub struct SaNtfAdditionalInfoT {
    pub infoId: SaNtfElementIdT,
    pub infoType: SaNtfValueTypeT,
    pub infoValue: SaNtfValueT,
}
#[test]
fn bindgen_test_layout_SaNtfAdditionalInfoT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfAdditionalInfoT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfAdditionalInfoT>(),
        16usize,
        concat!("Size of: ", stringify!(SaNtfAdditionalInfoT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfAdditionalInfoT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfAdditionalInfoT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAdditionalInfoT),
            "::",
            stringify!(infoId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAdditionalInfoT),
            "::",
            stringify!(infoType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAdditionalInfoT),
            "::",
            stringify!(infoValue)
        )
    );
}
#[repr(C)]
pub struct SaNtfNotificationHeaderT {
    pub eventType: *mut SaNtfEventTypeT,
    pub notificationObject: *mut SaNameT,
    pub notifyingObject: *mut SaNameT,
    pub notificationClassId: *mut SaNtfClassIdT,
    pub eventTime: *mut SaTimeT,
    pub numCorrelatedNotifications: SaUint16T,
    pub lengthAdditionalText: SaUint16T,
    pub numAdditionalInfo: SaUint16T,
    pub notificationId: *mut SaNtfIdentifierT,
    pub correlatedNotifications: *mut SaNtfIdentifierT,
    pub additionalText: SaStringT,
    pub additionalInfo: *mut SaNtfAdditionalInfoT,
}
#[test]
fn bindgen_test_layout_SaNtfNotificationHeaderT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfNotificationHeaderT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfNotificationHeaderT>(),
        80usize,
        concat!("Size of: ", stringify!(SaNtfNotificationHeaderT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfNotificationHeaderT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfNotificationHeaderT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(eventType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(notificationObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notifyingObject) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(notifyingObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationClassId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(notificationClassId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventTime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(eventTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numCorrelatedNotifications) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(numCorrelatedNotifications)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengthAdditionalText) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(lengthAdditionalText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAdditionalInfo) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(numAdditionalInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationId) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(notificationId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlatedNotifications) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(correlatedNotifications)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).additionalText) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(additionalText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).additionalInfo) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationHeaderT),
            "::",
            stringify!(additionalInfo)
        )
    );
}
pub const SaNtfSourceIndicatorT_SA_NTF_OBJECT_OPERATION: SaNtfSourceIndicatorT = 0;
pub const SaNtfSourceIndicatorT_SA_NTF_UNKNOWN_OPERATION: SaNtfSourceIndicatorT = 1;
pub const SaNtfSourceIndicatorT_SA_NTF_MANAGEMENT_OPERATION: SaNtfSourceIndicatorT = 2;
pub type SaNtfSourceIndicatorT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaNtfAttributeChangeT {
    pub attributeId: SaNtfElementIdT,
    pub attributeType: SaNtfValueTypeT,
    pub oldAttributePresent: SaBoolT,
    pub oldAttributeValue: SaNtfValueT,
    pub newAttributeValue: SaNtfValueT,
}
#[test]
fn bindgen_test_layout_SaNtfAttributeChangeT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfAttributeChangeT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfAttributeChangeT>(),
        32usize,
        concat!("Size of: ", stringify!(SaNtfAttributeChangeT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfAttributeChangeT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfAttributeChangeT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeT),
            "::",
            stringify!(attributeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeT),
            "::",
            stringify!(attributeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldAttributePresent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeT),
            "::",
            stringify!(oldAttributePresent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldAttributeValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeT),
            "::",
            stringify!(oldAttributeValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newAttributeValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeT),
            "::",
            stringify!(newAttributeValue)
        )
    );
}
#[repr(C)]
pub struct SaNtfAttributeChangeNotificationT {
    pub notificationHandle: SaNtfNotificationHandleT,
    pub notificationHeader: SaNtfNotificationHeaderT,
    pub numAttributes: SaUint16T,
    pub sourceIndicator: *mut SaNtfSourceIndicatorT,
    pub changedAttributes: *mut SaNtfAttributeChangeT,
}
#[test]
fn bindgen_test_layout_SaNtfAttributeChangeNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfAttributeChangeNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfAttributeChangeNotificationT>(),
        112usize,
        concat!("Size of: ", stringify!(SaNtfAttributeChangeNotificationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfAttributeChangeNotificationT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfAttributeChangeNotificationT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationT),
            "::",
            stringify!(notificationHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationT),
            "::",
            stringify!(notificationHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAttributes) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationT),
            "::",
            stringify!(numAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceIndicator) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationT),
            "::",
            stringify!(sourceIndicator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changedAttributes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationT),
            "::",
            stringify!(changedAttributes)
        )
    );
}
#[repr(C)]
pub struct SaNtfAttributeT {
    pub attributeId: SaNtfElementIdT,
    pub attributeType: SaNtfValueTypeT,
    pub attributeValue: SaNtfValueT,
}
#[test]
fn bindgen_test_layout_SaNtfAttributeT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfAttributeT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfAttributeT>(),
        16usize,
        concat!("Size of: ", stringify!(SaNtfAttributeT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfAttributeT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfAttributeT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeT),
            "::",
            stringify!(attributeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeT),
            "::",
            stringify!(attributeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeT),
            "::",
            stringify!(attributeValue)
        )
    );
}
#[repr(C)]
pub struct SaNtfObjectCreateDeleteNotificationT {
    pub notificationHandle: SaNtfNotificationHandleT,
    pub notificationHeader: SaNtfNotificationHeaderT,
    pub numAttributes: SaUint16T,
    pub sourceIndicator: *mut SaNtfSourceIndicatorT,
    pub objectAttributes: *mut SaNtfAttributeT,
}
#[test]
fn bindgen_test_layout_SaNtfObjectCreateDeleteNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfObjectCreateDeleteNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfObjectCreateDeleteNotificationT>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(SaNtfObjectCreateDeleteNotificationT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfObjectCreateDeleteNotificationT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfObjectCreateDeleteNotificationT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationT),
            "::",
            stringify!(notificationHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationT),
            "::",
            stringify!(notificationHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAttributes) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationT),
            "::",
            stringify!(numAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceIndicator) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationT),
            "::",
            stringify!(sourceIndicator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectAttributes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationT),
            "::",
            stringify!(objectAttributes)
        )
    );
}
#[repr(C)]
pub struct SaNtfStateChangeT {
    pub stateId: SaNtfElementIdT,
    pub oldStatePresent: SaBoolT,
    pub oldState: SaUint16T,
    pub newState: SaUint16T,
}
#[test]
fn bindgen_test_layout_SaNtfStateChangeT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfStateChangeT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfStateChangeT>(),
        12usize,
        concat!("Size of: ", stringify!(SaNtfStateChangeT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfStateChangeT>(),
        4usize,
        concat!("Alignment of ", stringify!(SaNtfStateChangeT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeT),
            "::",
            stringify!(stateId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldStatePresent) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeT),
            "::",
            stringify!(oldStatePresent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldState) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeT),
            "::",
            stringify!(oldState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newState) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeT),
            "::",
            stringify!(newState)
        )
    );
}
#[repr(C)]
pub struct SaNtfStateChangeNotificationT {
    pub notificationHandle: SaNtfNotificationHandleT,
    pub notificationHeader: SaNtfNotificationHeaderT,
    pub numStateChanges: SaUint16T,
    pub sourceIndicator: *mut SaNtfSourceIndicatorT,
    pub changedStates: *mut SaNtfStateChangeT,
}
#[test]
fn bindgen_test_layout_SaNtfStateChangeNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfStateChangeNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfStateChangeNotificationT>(),
        112usize,
        concat!("Size of: ", stringify!(SaNtfStateChangeNotificationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfStateChangeNotificationT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfStateChangeNotificationT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationT),
            "::",
            stringify!(notificationHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationT),
            "::",
            stringify!(notificationHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numStateChanges) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationT),
            "::",
            stringify!(numStateChanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceIndicator) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationT),
            "::",
            stringify!(sourceIndicator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changedStates) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationT),
            "::",
            stringify!(changedStates)
        )
    );
}
pub const SaNtfProbableCauseT_SA_NTF_ADAPTER_ERROR: SaNtfProbableCauseT = 0;
pub const SaNtfProbableCauseT_SA_NTF_APPLICATION_SUBSYSTEM_FAILURE: SaNtfProbableCauseT = 1;
pub const SaNtfProbableCauseT_SA_NTF_BANDWIDTH_REDUCED: SaNtfProbableCauseT = 2;
pub const SaNtfProbableCauseT_SA_NTF_CALL_ESTABLISHMENT_ERROR: SaNtfProbableCauseT = 3;
pub const SaNtfProbableCauseT_SA_NTF_COMMUNICATIONS_PROTOCOL_ERROR: SaNtfProbableCauseT = 4;
pub const SaNtfProbableCauseT_SA_NTF_COMMUNICATIONS_SUBSYSTEM_FAILURE: SaNtfProbableCauseT = 5;
pub const SaNtfProbableCauseT_SA_NTF_CONFIGURATION_OR_CUSTOMIZATION_ERROR: SaNtfProbableCauseT = 6;
pub const SaNtfProbableCauseT_SA_NTF_CONGESTION: SaNtfProbableCauseT = 7;
pub const SaNtfProbableCauseT_SA_NTF_CORRUPT_DATA: SaNtfProbableCauseT = 8;
pub const SaNtfProbableCauseT_SA_NTF_CPU_CYCLES_LIMIT_EXCEEDED: SaNtfProbableCauseT = 9;
pub const SaNtfProbableCauseT_SA_NTF_DATASET_OR_MODEM_ERROR: SaNtfProbableCauseT = 10;
pub const SaNtfProbableCauseT_SA_NTF_DEGRADED_SIGNAL: SaNtfProbableCauseT = 11;
pub const SaNtfProbableCauseT_SA_NTF_D_T_E: SaNtfProbableCauseT = 12;
pub const SaNtfProbableCauseT_SA_NTF_ENCLOSURE_DOOR_OPEN: SaNtfProbableCauseT = 13;
pub const SaNtfProbableCauseT_SA_NTF_EQUIPMENT_MALFUNCTION: SaNtfProbableCauseT = 14;
pub const SaNtfProbableCauseT_SA_NTF_EXCESSIVE_VIBRATION: SaNtfProbableCauseT = 15;
pub const SaNtfProbableCauseT_SA_NTF_FILE_ERROR: SaNtfProbableCauseT = 16;
pub const SaNtfProbableCauseT_SA_NTF_FIRE_DETECTED: SaNtfProbableCauseT = 17;
pub const SaNtfProbableCauseT_SA_NTF_FLOOD_DETECTED: SaNtfProbableCauseT = 18;
pub const SaNtfProbableCauseT_SA_NTF_FRAMING_ERROR: SaNtfProbableCauseT = 19;
pub const SaNtfProbableCauseT_SA_NTF_HEATING_OR_VENTILATION_OR_COOLING_SYSTEM_PROBLEM:
    SaNtfProbableCauseT = 20;
pub const SaNtfProbableCauseT_SA_NTF_HUMIDITY_UNACCEPTABLE: SaNtfProbableCauseT = 21;
pub const SaNtfProbableCauseT_SA_NTF_INPUT_OUTPUT_DEVICE_ERROR: SaNtfProbableCauseT = 22;
pub const SaNtfProbableCauseT_SA_NTF_INPUT_DEVICE_ERROR: SaNtfProbableCauseT = 23;
pub const SaNtfProbableCauseT_SA_NTF_L_A_N_ERROR: SaNtfProbableCauseT = 24;
pub const SaNtfProbableCauseT_SA_NTF_LEAK_DETECTED: SaNtfProbableCauseT = 25;
pub const SaNtfProbableCauseT_SA_NTF_LOCAL_NODE_TRANSMISSION_ERROR: SaNtfProbableCauseT = 26;
pub const SaNtfProbableCauseT_SA_NTF_LOSS_OF_FRAME: SaNtfProbableCauseT = 27;
pub const SaNtfProbableCauseT_SA_NTF_LOSS_OF_SIGNAL: SaNtfProbableCauseT = 28;
pub const SaNtfProbableCauseT_SA_NTF_MATERIAL_SUPPLY_EXHAUSTED: SaNtfProbableCauseT = 29;
pub const SaNtfProbableCauseT_SA_NTF_MULTIPLEXER_PROBLEM: SaNtfProbableCauseT = 30;
pub const SaNtfProbableCauseT_SA_NTF_OUT_OF_MEMORY: SaNtfProbableCauseT = 31;
pub const SaNtfProbableCauseT_SA_NTF_OUTPUT_DEVICE_ERROR: SaNtfProbableCauseT = 32;
pub const SaNtfProbableCauseT_SA_NTF_PERFORMANCE_DEGRADED: SaNtfProbableCauseT = 33;
pub const SaNtfProbableCauseT_SA_NTF_POWER_PROBLEM: SaNtfProbableCauseT = 34;
pub const SaNtfProbableCauseT_SA_NTF_PRESSURE_UNACCEPTABLE: SaNtfProbableCauseT = 35;
pub const SaNtfProbableCauseT_SA_NTF_PROCESSOR_PROBLEM: SaNtfProbableCauseT = 36;
pub const SaNtfProbableCauseT_SA_NTF_PUMP_FAILURE: SaNtfProbableCauseT = 37;
pub const SaNtfProbableCauseT_SA_NTF_QUEUE_SIZE_EXCEEDED: SaNtfProbableCauseT = 38;
pub const SaNtfProbableCauseT_SA_NTF_RECEIVE_FAILURE: SaNtfProbableCauseT = 39;
pub const SaNtfProbableCauseT_SA_NTF_RECEIVER_FAILURE: SaNtfProbableCauseT = 40;
pub const SaNtfProbableCauseT_SA_NTF_REMOTE_NODE_TRANSMISSION_ERROR: SaNtfProbableCauseT = 41;
pub const SaNtfProbableCauseT_SA_NTF_RESOURCE_AT_OR_NEARING_CAPACITY: SaNtfProbableCauseT = 42;
pub const SaNtfProbableCauseT_SA_NTF_RESPONSE_TIME_EXCESSIVE: SaNtfProbableCauseT = 43;
pub const SaNtfProbableCauseT_SA_NTF_RETRANSMISSION_RATE_EXCESSIVE: SaNtfProbableCauseT = 44;
pub const SaNtfProbableCauseT_SA_NTF_SOFTWARE_ERROR: SaNtfProbableCauseT = 45;
pub const SaNtfProbableCauseT_SA_NTF_SOFTWARE_PROGRAM_ABNORMALLY_TERMINATED: SaNtfProbableCauseT =
    46;
pub const SaNtfProbableCauseT_SA_NTF_SOFTWARE_PROGRAM_ERROR: SaNtfProbableCauseT = 47;
pub const SaNtfProbableCauseT_SA_NTF_STORAGE_CAPACITY_PROBLEM: SaNtfProbableCauseT = 48;
pub const SaNtfProbableCauseT_SA_NTF_TEMPERATURE_UNACCEPTABLE: SaNtfProbableCauseT = 49;
pub const SaNtfProbableCauseT_SA_NTF_THRESHOLD_CROSSED: SaNtfProbableCauseT = 50;
pub const SaNtfProbableCauseT_SA_NTF_TIMING_PROBLEM: SaNtfProbableCauseT = 51;
pub const SaNtfProbableCauseT_SA_NTF_TOXIC_LEAK_DETECTED: SaNtfProbableCauseT = 52;
pub const SaNtfProbableCauseT_SA_NTF_TRANSMIT_FAILURE: SaNtfProbableCauseT = 53;
pub const SaNtfProbableCauseT_SA_NTF_TRANSMITTER_FAILURE: SaNtfProbableCauseT = 54;
pub const SaNtfProbableCauseT_SA_NTF_UNDERLYING_RESOURCE_UNAVAILABLE: SaNtfProbableCauseT = 55;
pub const SaNtfProbableCauseT_SA_NTF_VERSION_MISMATCH: SaNtfProbableCauseT = 56;
pub const SaNtfProbableCauseT_SA_NTF_AUTHENTICATION_FAILURE: SaNtfProbableCauseT = 57;
pub const SaNtfProbableCauseT_SA_NTF_BREACH_OF_CONFIDENTIALITY: SaNtfProbableCauseT = 58;
pub const SaNtfProbableCauseT_SA_NTF_CABLE_TAMPER: SaNtfProbableCauseT = 59;
pub const SaNtfProbableCauseT_SA_NTF_DELAYED_INFORMATION: SaNtfProbableCauseT = 60;
pub const SaNtfProbableCauseT_SA_NTF_DENIAL_OF_SERVICE: SaNtfProbableCauseT = 61;
pub const SaNtfProbableCauseT_SA_NTF_DUPLICATE_INFORMATION: SaNtfProbableCauseT = 62;
pub const SaNtfProbableCauseT_SA_NTF_INFORMATION_MISSING: SaNtfProbableCauseT = 63;
pub const SaNtfProbableCauseT_SA_NTF_INFORMATION_MODIFICATION_DETECTED: SaNtfProbableCauseT = 64;
pub const SaNtfProbableCauseT_SA_NTF_INFORMATION_OUT_OF_SEQUENCE: SaNtfProbableCauseT = 65;
pub const SaNtfProbableCauseT_SA_NTF_INTRUSION_DETECTION: SaNtfProbableCauseT = 66;
pub const SaNtfProbableCauseT_SA_NTF_KEY_EXPIRED: SaNtfProbableCauseT = 67;
pub const SaNtfProbableCauseT_SA_NTF_NON_REPUDIATION_FAILURE: SaNtfProbableCauseT = 68;
pub const SaNtfProbableCauseT_SA_NTF_OUT_OF_HOURS_ACTIVITY: SaNtfProbableCauseT = 69;
pub const SaNtfProbableCauseT_SA_NTF_OUT_OF_SERVICE: SaNtfProbableCauseT = 70;
pub const SaNtfProbableCauseT_SA_NTF_PROCEDURAL_ERROR: SaNtfProbableCauseT = 71;
pub const SaNtfProbableCauseT_SA_NTF_UNAUTHORIZED_ACCESS_ATTEMPT: SaNtfProbableCauseT = 72;
pub const SaNtfProbableCauseT_SA_NTF_UNEXPECTED_INFORMATION: SaNtfProbableCauseT = 73;
pub const SaNtfProbableCauseT_SA_NTF_UNSPECIFIED_REASON: SaNtfProbableCauseT = 74;
pub type SaNtfProbableCauseT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaNtfSpecificProblemT {
    pub problemId: SaNtfElementIdT,
    pub problemClassId: SaNtfClassIdT,
    pub problemType: SaNtfValueTypeT,
    pub problemValue: SaNtfValueT,
}
#[test]
fn bindgen_test_layout_SaNtfSpecificProblemT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfSpecificProblemT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfSpecificProblemT>(),
        24usize,
        concat!("Size of: ", stringify!(SaNtfSpecificProblemT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfSpecificProblemT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfSpecificProblemT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).problemId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSpecificProblemT),
            "::",
            stringify!(problemId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).problemClassId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSpecificProblemT),
            "::",
            stringify!(problemClassId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).problemType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSpecificProblemT),
            "::",
            stringify!(problemType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).problemValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSpecificProblemT),
            "::",
            stringify!(problemValue)
        )
    );
}
pub const SaNtfSeverityT_SA_NTF_SEVERITY_CLEARED: SaNtfSeverityT = 0;
pub const SaNtfSeverityT_SA_NTF_SEVERITY_INDETERMINATE: SaNtfSeverityT = 1;
pub const SaNtfSeverityT_SA_NTF_SEVERITY_WARNING: SaNtfSeverityT = 2;
pub const SaNtfSeverityT_SA_NTF_SEVERITY_MINOR: SaNtfSeverityT = 3;
pub const SaNtfSeverityT_SA_NTF_SEVERITY_MAJOR: SaNtfSeverityT = 4;
pub const SaNtfSeverityT_SA_NTF_SEVERITY_CRITICAL: SaNtfSeverityT = 5;
pub type SaNtfSeverityT = ::std::os::raw::c_uint;
pub const SaNtfSeverityTrendT_SA_NTF_TREND_MORE_SEVERE: SaNtfSeverityTrendT = 0;
pub const SaNtfSeverityTrendT_SA_NTF_TREND_NO_CHANGE: SaNtfSeverityTrendT = 1;
pub const SaNtfSeverityTrendT_SA_NTF_TREND_LESS_SEVERE: SaNtfSeverityTrendT = 2;
pub type SaNtfSeverityTrendT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaNtfThresholdInformationT {
    pub thresholdId: SaNtfElementIdT,
    pub thresholdValueType: SaNtfValueTypeT,
    pub thresholdValue: SaNtfValueT,
    pub thresholdHysteresis: SaNtfValueT,
    pub observedValue: SaNtfValueT,
    pub armTime: SaTimeT,
}
#[test]
fn bindgen_test_layout_SaNtfThresholdInformationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfThresholdInformationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfThresholdInformationT>(),
        40usize,
        concat!("Size of: ", stringify!(SaNtfThresholdInformationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfThresholdInformationT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfThresholdInformationT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thresholdId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfThresholdInformationT),
            "::",
            stringify!(thresholdId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thresholdValueType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfThresholdInformationT),
            "::",
            stringify!(thresholdValueType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thresholdValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfThresholdInformationT),
            "::",
            stringify!(thresholdValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thresholdHysteresis) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfThresholdInformationT),
            "::",
            stringify!(thresholdHysteresis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).observedValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfThresholdInformationT),
            "::",
            stringify!(observedValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).armTime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfThresholdInformationT),
            "::",
            stringify!(armTime)
        )
    );
}
#[repr(C)]
pub struct SaNtfProposedRepairActionT {
    pub actionId: SaNtfElementIdT,
    pub actionValueType: SaNtfValueTypeT,
    pub actionValue: SaNtfValueT,
}
#[test]
fn bindgen_test_layout_SaNtfProposedRepairActionT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfProposedRepairActionT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfProposedRepairActionT>(),
        16usize,
        concat!("Size of: ", stringify!(SaNtfProposedRepairActionT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfProposedRepairActionT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfProposedRepairActionT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfProposedRepairActionT),
            "::",
            stringify!(actionId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionValueType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfProposedRepairActionT),
            "::",
            stringify!(actionValueType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actionValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfProposedRepairActionT),
            "::",
            stringify!(actionValue)
        )
    );
}
#[repr(C)]
pub struct SaNtfAlarmNotificationT {
    pub notificationHandle: SaNtfNotificationHandleT,
    pub notificationHeader: SaNtfNotificationHeaderT,
    pub numSpecificProblems: SaUint16T,
    pub numMonitoredAttributes: SaUint16T,
    pub numProposedRepairActions: SaUint16T,
    pub probableCause: *mut SaNtfProbableCauseT,
    pub specificProblems: *mut SaNtfSpecificProblemT,
    pub perceivedSeverity: *mut SaNtfSeverityT,
    pub trend: *mut SaNtfSeverityTrendT,
    pub thresholdInformation: *mut SaNtfThresholdInformationT,
    pub monitoredAttributes: *mut SaNtfAttributeT,
    pub proposedRepairActions: *mut SaNtfProposedRepairActionT,
}
#[test]
fn bindgen_test_layout_SaNtfAlarmNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfAlarmNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfAlarmNotificationT>(),
        152usize,
        concat!("Size of: ", stringify!(SaNtfAlarmNotificationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfAlarmNotificationT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfAlarmNotificationT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(notificationHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(notificationHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSpecificProblems) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(numSpecificProblems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numMonitoredAttributes) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(numMonitoredAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numProposedRepairActions) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(numProposedRepairActions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).probableCause) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(probableCause)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specificProblems) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(specificProblems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perceivedSeverity) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(perceivedSeverity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trend) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(trend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thresholdInformation) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(thresholdInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monitoredAttributes) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(monitoredAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proposedRepairActions) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationT),
            "::",
            stringify!(proposedRepairActions)
        )
    );
}
#[repr(C)]
pub struct SaNtfSecurityAlarmDetectorT {
    pub valueType: SaNtfValueTypeT,
    pub value: SaNtfValueT,
}
#[test]
fn bindgen_test_layout_SaNtfSecurityAlarmDetectorT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfSecurityAlarmDetectorT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfSecurityAlarmDetectorT>(),
        16usize,
        concat!("Size of: ", stringify!(SaNtfSecurityAlarmDetectorT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfSecurityAlarmDetectorT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfSecurityAlarmDetectorT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmDetectorT),
            "::",
            stringify!(valueType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmDetectorT),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
pub struct SaNtfServiceUserT {
    pub valueType: SaNtfValueTypeT,
    pub value: SaNtfValueT,
}
#[test]
fn bindgen_test_layout_SaNtfServiceUserT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfServiceUserT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfServiceUserT>(),
        16usize,
        concat!("Size of: ", stringify!(SaNtfServiceUserT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfServiceUserT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfServiceUserT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfServiceUserT),
            "::",
            stringify!(valueType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfServiceUserT),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
pub struct SaNtfSecurityAlarmNotificationT {
    pub notificationHandle: SaNtfNotificationHandleT,
    pub notificationHeader: SaNtfNotificationHeaderT,
    pub probableCause: *mut SaNtfProbableCauseT,
    pub severity: *mut SaNtfSeverityT,
    pub securityAlarmDetector: *mut SaNtfSecurityAlarmDetectorT,
    pub serviceUser: *mut SaNtfServiceUserT,
    pub serviceProvider: *mut SaNtfServiceUserT,
}
#[test]
fn bindgen_test_layout_SaNtfSecurityAlarmNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfSecurityAlarmNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfSecurityAlarmNotificationT>(),
        128usize,
        concat!("Size of: ", stringify!(SaNtfSecurityAlarmNotificationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfSecurityAlarmNotificationT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfSecurityAlarmNotificationT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationT),
            "::",
            stringify!(notificationHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationT),
            "::",
            stringify!(notificationHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).probableCause) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationT),
            "::",
            stringify!(probableCause)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).severity) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationT),
            "::",
            stringify!(severity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).securityAlarmDetector) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationT),
            "::",
            stringify!(securityAlarmDetector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serviceUser) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationT),
            "::",
            stringify!(serviceUser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serviceProvider) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationT),
            "::",
            stringify!(serviceProvider)
        )
    );
}
#[repr(C)]
pub struct SaNtfMiscellaneousNotificationT {
    pub notificationHandle: SaNtfNotificationHandleT,
    pub notificationHeader: SaNtfNotificationHeaderT,
}
#[test]
fn bindgen_test_layout_SaNtfMiscellaneousNotificationT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfMiscellaneousNotificationT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfMiscellaneousNotificationT>(),
        88usize,
        concat!("Size of: ", stringify!(SaNtfMiscellaneousNotificationT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfMiscellaneousNotificationT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfMiscellaneousNotificationT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfMiscellaneousNotificationT),
            "::",
            stringify!(notificationHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfMiscellaneousNotificationT),
            "::",
            stringify!(notificationHeader)
        )
    );
}
pub type SaNtfSubscriptionIdT = SaUint32T;
#[repr(C)]
pub struct SaNtfNotificationFilterHeaderT {
    pub numEventTypes: SaUint16T,
    pub eventTypes: *mut SaNtfEventTypeT,
    pub numNotificationObjects: SaUint16T,
    pub notificationObjects: *mut SaNameT,
    pub numNotifyingObjects: SaUint16T,
    pub notifyingObjects: *mut SaNameT,
    pub numNotificationClassIds: SaUint16T,
    pub notificationClassIds: *mut SaNtfClassIdT,
}
#[test]
fn bindgen_test_layout_SaNtfNotificationFilterHeaderT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfNotificationFilterHeaderT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfNotificationFilterHeaderT>(),
        64usize,
        concat!("Size of: ", stringify!(SaNtfNotificationFilterHeaderT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfNotificationFilterHeaderT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfNotificationFilterHeaderT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numEventTypes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(numEventTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventTypes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(eventTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numNotificationObjects) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(numNotificationObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationObjects) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(notificationObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numNotifyingObjects) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(numNotifyingObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notifyingObjects) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(notifyingObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numNotificationClassIds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(numNotificationClassIds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationClassIds) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationFilterHeaderT),
            "::",
            stringify!(notificationClassIds)
        )
    );
}
#[repr(C)]
pub struct SaNtfObjectCreateDeleteNotificationFilterT {
    pub notificationFilterHandle: SaNtfNotificationFilterHandleT,
    pub notificationFilterHeader: SaNtfNotificationFilterHeaderT,
    pub numSourceIndicators: SaUint16T,
    pub sourceIndicators: *mut SaNtfSourceIndicatorT,
}
#[test]
fn bindgen_test_layout_SaNtfObjectCreateDeleteNotificationFilterT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfObjectCreateDeleteNotificationFilterT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfObjectCreateDeleteNotificationFilterT>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(SaNtfObjectCreateDeleteNotificationFilterT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfObjectCreateDeleteNotificationFilterT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfObjectCreateDeleteNotificationFilterT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationFilterT),
            "::",
            stringify!(notificationFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationFilterT),
            "::",
            stringify!(notificationFilterHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSourceIndicators) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationFilterT),
            "::",
            stringify!(numSourceIndicators)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceIndicators) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfObjectCreateDeleteNotificationFilterT),
            "::",
            stringify!(sourceIndicators)
        )
    );
}
#[repr(C)]
pub struct SaNtfAttributeChangeNotificationFilterT {
    pub notificationFilterHandle: SaNtfNotificationFilterHandleT,
    pub notificationFilterHeader: SaNtfNotificationFilterHeaderT,
    pub numSourceIndicators: SaUint16T,
    pub sourceIndicators: *mut SaNtfSourceIndicatorT,
}
#[test]
fn bindgen_test_layout_SaNtfAttributeChangeNotificationFilterT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfAttributeChangeNotificationFilterT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfAttributeChangeNotificationFilterT>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(SaNtfAttributeChangeNotificationFilterT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfAttributeChangeNotificationFilterT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfAttributeChangeNotificationFilterT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationFilterT),
            "::",
            stringify!(notificationFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationFilterT),
            "::",
            stringify!(notificationFilterHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSourceIndicators) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationFilterT),
            "::",
            stringify!(numSourceIndicators)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceIndicators) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAttributeChangeNotificationFilterT),
            "::",
            stringify!(sourceIndicators)
        )
    );
}
#[repr(C)]
pub struct SaNtfStateChangeNotificationFilterT_2 {
    pub notificationFilterHandle: SaNtfNotificationFilterHandleT,
    pub notificationFilterHeader: SaNtfNotificationFilterHeaderT,
    pub numSourceIndicators: SaUint16T,
    pub sourceIndicators: *mut SaNtfSourceIndicatorT,
    pub numStateChanges: SaUint16T,
    pub stateId: *mut SaNtfElementIdT,
}
#[test]
fn bindgen_test_layout_SaNtfStateChangeNotificationFilterT_2() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfStateChangeNotificationFilterT_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfStateChangeNotificationFilterT_2>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(SaNtfStateChangeNotificationFilterT_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfStateChangeNotificationFilterT_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfStateChangeNotificationFilterT_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationFilterT_2),
            "::",
            stringify!(notificationFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationFilterT_2),
            "::",
            stringify!(notificationFilterHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSourceIndicators) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationFilterT_2),
            "::",
            stringify!(numSourceIndicators)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceIndicators) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationFilterT_2),
            "::",
            stringify!(sourceIndicators)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numStateChanges) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationFilterT_2),
            "::",
            stringify!(numStateChanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateId) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfStateChangeNotificationFilterT_2),
            "::",
            stringify!(stateId)
        )
    );
}
#[repr(C)]
pub struct SaNtfAlarmNotificationFilterT {
    pub notificationFilterHandle: SaNtfNotificationFilterHandleT,
    pub notificationFilterHeader: SaNtfNotificationFilterHeaderT,
    pub numProbableCauses: SaUint16T,
    pub numPerceivedSeverities: SaUint16T,
    pub numTrends: SaUint16T,
    pub probableCauses: *mut SaNtfProbableCauseT,
    pub perceivedSeverities: *mut SaNtfSeverityT,
    pub trends: *mut SaNtfSeverityTrendT,
}
#[test]
fn bindgen_test_layout_SaNtfAlarmNotificationFilterT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfAlarmNotificationFilterT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfAlarmNotificationFilterT>(),
        104usize,
        concat!("Size of: ", stringify!(SaNtfAlarmNotificationFilterT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfAlarmNotificationFilterT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfAlarmNotificationFilterT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(notificationFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(notificationFilterHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numProbableCauses) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(numProbableCauses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numPerceivedSeverities) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(numPerceivedSeverities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numTrends) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(numTrends)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).probableCauses) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(probableCauses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perceivedSeverities) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(perceivedSeverities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trends) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfAlarmNotificationFilterT),
            "::",
            stringify!(trends)
        )
    );
}
#[repr(C)]
pub struct SaNtfSecurityAlarmNotificationFilterT {
    pub notificationFilterHandle: SaNtfNotificationFilterHandleT,
    pub notificationFilterHeader: SaNtfNotificationFilterHeaderT,
    pub numProbableCauses: SaUint16T,
    pub numSeverities: SaUint16T,
    pub numSecurityAlarmDetectors: SaUint16T,
    pub numServiceUsers: SaUint16T,
    pub numServiceProviders: SaUint16T,
    pub probableCauses: *mut SaNtfProbableCauseT,
    pub severities: *mut SaNtfSeverityT,
    pub securityAlarmDetectors: *mut SaNtfSecurityAlarmDetectorT,
    pub serviceUsers: *mut SaNtfServiceUserT,
    pub serviceProviders: *mut SaNtfServiceUserT,
}
#[test]
fn bindgen_test_layout_SaNtfSecurityAlarmNotificationFilterT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfSecurityAlarmNotificationFilterT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfSecurityAlarmNotificationFilterT>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfSecurityAlarmNotificationFilterT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(notificationFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(notificationFilterHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numProbableCauses) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(numProbableCauses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSeverities) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(numSeverities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSecurityAlarmDetectors) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(numSecurityAlarmDetectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numServiceUsers) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(numServiceUsers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numServiceProviders) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(numServiceProviders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).probableCauses) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(probableCauses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).severities) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(severities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).securityAlarmDetectors) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(securityAlarmDetectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serviceUsers) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(serviceUsers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serviceProviders) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSecurityAlarmNotificationFilterT),
            "::",
            stringify!(serviceProviders)
        )
    );
}
#[repr(C)]
pub struct SaNtfMiscellaneousNotificationFilterT {
    pub notificationFilterHandle: SaNtfNotificationFilterHandleT,
    pub notificationFilterHeader: SaNtfNotificationFilterHeaderT,
}
#[test]
fn bindgen_test_layout_SaNtfMiscellaneousNotificationFilterT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfMiscellaneousNotificationFilterT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfMiscellaneousNotificationFilterT>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(SaNtfMiscellaneousNotificationFilterT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfMiscellaneousNotificationFilterT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfMiscellaneousNotificationFilterT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfMiscellaneousNotificationFilterT),
            "::",
            stringify!(notificationFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationFilterHeader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfMiscellaneousNotificationFilterT),
            "::",
            stringify!(notificationFilterHeader)
        )
    );
}
pub const SaNtfSearchModeT_SA_NTF_SEARCH_BEFORE_OR_AT_TIME: SaNtfSearchModeT = 1;
pub const SaNtfSearchModeT_SA_NTF_SEARCH_AT_TIME: SaNtfSearchModeT = 2;
pub const SaNtfSearchModeT_SA_NTF_SEARCH_AT_OR_AFTER_TIME: SaNtfSearchModeT = 3;
pub const SaNtfSearchModeT_SA_NTF_SEARCH_BEFORE_TIME: SaNtfSearchModeT = 4;
pub const SaNtfSearchModeT_SA_NTF_SEARCH_AFTER_TIME: SaNtfSearchModeT = 5;
pub const SaNtfSearchModeT_SA_NTF_SEARCH_NOTIFICATION_ID: SaNtfSearchModeT = 6;
pub const SaNtfSearchModeT_SA_NTF_SEARCH_ONLY_FILTER: SaNtfSearchModeT = 7;
pub type SaNtfSearchModeT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaNtfSearchCriteriaT {
    pub searchMode: SaNtfSearchModeT,
    pub eventTime: SaTimeT,
    pub notificationId: SaNtfIdentifierT,
}
#[test]
fn bindgen_test_layout_SaNtfSearchCriteriaT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfSearchCriteriaT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfSearchCriteriaT>(),
        24usize,
        concat!("Size of: ", stringify!(SaNtfSearchCriteriaT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfSearchCriteriaT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfSearchCriteriaT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSearchCriteriaT),
            "::",
            stringify!(searchMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSearchCriteriaT),
            "::",
            stringify!(eventTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfSearchCriteriaT),
            "::",
            stringify!(notificationId)
        )
    );
}
pub const SaNtfSearchDirectionT_SA_NTF_SEARCH_OLDER: SaNtfSearchDirectionT = 1;
pub const SaNtfSearchDirectionT_SA_NTF_SEARCH_YOUNGER: SaNtfSearchDirectionT = 2;
pub type SaNtfSearchDirectionT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaNtfNotificationTypeFilterHandlesT_3 {
    pub objectCreateDeleteFilterHandle: SaNtfNotificationFilterHandleT,
    pub attributeChangeFilterHandle: SaNtfNotificationFilterHandleT,
    pub stateChangeFilterHandle: SaNtfNotificationFilterHandleT,
    pub alarmFilterHandle: SaNtfNotificationFilterHandleT,
    pub securityAlarmFilterHandle: SaNtfNotificationFilterHandleT,
    pub miscellaneousFilterHandle: SaNtfNotificationFilterHandleT,
}
#[test]
fn bindgen_test_layout_SaNtfNotificationTypeFilterHandlesT_3() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfNotificationTypeFilterHandlesT_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfNotificationTypeFilterHandlesT_3>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfNotificationTypeFilterHandlesT_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).objectCreateDeleteFilterHandle) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3),
            "::",
            stringify!(objectCreateDeleteFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeChangeFilterHandle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3),
            "::",
            stringify!(attributeChangeFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateChangeFilterHandle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3),
            "::",
            stringify!(stateChangeFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarmFilterHandle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3),
            "::",
            stringify!(alarmFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).securityAlarmFilterHandle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3),
            "::",
            stringify!(securityAlarmFilterHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miscellaneousFilterHandle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationTypeFilterHandlesT_3),
            "::",
            stringify!(miscellaneousFilterHandle)
        )
    );
}
#[repr(C)]
pub struct SaNtfNotificationsT {
    pub notificationType: SaNtfNotificationTypeT,
    pub notification: SaNtfNotificationsT__bindgen_ty_1,
}
#[repr(C)]
pub struct SaNtfNotificationsT__bindgen_ty_1 {
    pub objectCreateDeleteNotification: __BindgenUnionField<SaNtfObjectCreateDeleteNotificationT>,
    pub attributeChangeNotification: __BindgenUnionField<SaNtfAttributeChangeNotificationT>,
    pub stateChangeNotification: __BindgenUnionField<SaNtfStateChangeNotificationT>,
    pub alarmNotification: __BindgenUnionField<SaNtfAlarmNotificationT>,
    pub securityAlarmNotification: __BindgenUnionField<SaNtfSecurityAlarmNotificationT>,
    pub bindgen_union_field: [u64; 19usize],
}
#[test]
fn bindgen_test_layout_SaNtfNotificationsT__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfNotificationsT__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfNotificationsT__bindgen_ty_1>(),
        152usize,
        concat!("Size of: ", stringify!(SaNtfNotificationsT__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfNotificationsT__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaNtfNotificationsT__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).objectCreateDeleteNotification) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationsT__bindgen_ty_1),
            "::",
            stringify!(objectCreateDeleteNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeChangeNotification) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationsT__bindgen_ty_1),
            "::",
            stringify!(attributeChangeNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateChangeNotification) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationsT__bindgen_ty_1),
            "::",
            stringify!(stateChangeNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarmNotification) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationsT__bindgen_ty_1),
            "::",
            stringify!(alarmNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).securityAlarmNotification) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationsT__bindgen_ty_1),
            "::",
            stringify!(securityAlarmNotification)
        )
    );
}
#[test]
fn bindgen_test_layout_SaNtfNotificationsT() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfNotificationsT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfNotificationsT>(),
        160usize,
        concat!("Size of: ", stringify!(SaNtfNotificationsT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfNotificationsT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfNotificationsT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationsT),
            "::",
            stringify!(notificationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notification) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfNotificationsT),
            "::",
            stringify!(notification)
        )
    );
}
pub const SaNtfStateT_SA_NTF_STATIC_FILTER_STATE: SaNtfStateT = 1;
pub const SaNtfStateT_SA_NTF_SUBSCRIBER_STATE: SaNtfStateT = 2;
pub type SaNtfStateT = ::std::os::raw::c_uint;
pub const SaNtfStaticFilterStateT_SA_NTF_STATIC_FILTER_STATE_INACTIVE: SaNtfStaticFilterStateT = 1;
pub const SaNtfStaticFilterStateT_SA_NTF_STATIC_FILTER_STATE_ACTIVE: SaNtfStaticFilterStateT = 2;
pub type SaNtfStaticFilterStateT = ::std::os::raw::c_uint;
pub const SaNtfSubscriberStateT_SA_NTF_SUBSCRIBER_STATE_FORWARD_NOT_OK: SaNtfSubscriberStateT = 1;
pub const SaNtfSubscriberStateT_SA_NTF_SUBSCRIBER_STATE_FORWARD_OK: SaNtfSubscriberStateT = 2;
pub type SaNtfSubscriberStateT = ::std::os::raw::c_uint;
pub const SaNtfNotificationMinorIdT_SA_NTF_NTFID_STATIC_FILTER_ACTIVATED:
    SaNtfNotificationMinorIdT = 101;
pub const SaNtfNotificationMinorIdT_SA_NTF_NTFID_STATIC_FILTER_DEACTIVATED:
    SaNtfNotificationMinorIdT = 102;
pub const SaNtfNotificationMinorIdT_SA_NTF_NTFID_CONSUMER_SLOW: SaNtfNotificationMinorIdT = 103;
pub const SaNtfNotificationMinorIdT_SA_NTF_NTFID_CONSUMER_FAST_ENOUGH: SaNtfNotificationMinorIdT =
    104;
pub type SaNtfNotificationMinorIdT = ::std::os::raw::c_uint;
pub type SaNtfNotificationCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        subscriptionId: SaNtfSubscriptionIdT,
        notification: *const SaNtfNotificationsT,
    ),
>;
pub type SaNtfNotificationDiscardedCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        subscriptionId: SaNtfSubscriptionIdT,
        notificationType: SaNtfNotificationTypeT,
        numberDiscarded: SaUint32T,
        discardedNotificationIdentifiers: *const SaNtfIdentifierT,
    ),
>;
pub type SaNtfStaticSuppressionFilterSetCallbackT_3 = ::std::option::Option<
    unsafe extern "C" fn(ntfHandle: SaNtfHandleT, eventTypeBitmap: SaNtfEventTypeBitmapT),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaNtfCallbacksT_3 {
    pub saNtfNotificationCallback: SaNtfNotificationCallbackT,
    pub saNtfNotificationDiscardedCallback: SaNtfNotificationDiscardedCallbackT,
    pub saNtfStaticSuppressionFilterSetCallback: SaNtfStaticSuppressionFilterSetCallbackT_3,
}
#[test]
fn bindgen_test_layout_SaNtfCallbacksT_3() {
    const UNINIT: ::std::mem::MaybeUninit<SaNtfCallbacksT_3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaNtfCallbacksT_3>(),
        24usize,
        concat!("Size of: ", stringify!(SaNtfCallbacksT_3))
    );
    assert_eq!(
        ::std::mem::align_of::<SaNtfCallbacksT_3>(),
        8usize,
        concat!("Alignment of ", stringify!(SaNtfCallbacksT_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saNtfNotificationCallback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfCallbacksT_3),
            "::",
            stringify!(saNtfNotificationCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saNtfNotificationDiscardedCallback) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfCallbacksT_3),
            "::",
            stringify!(saNtfNotificationDiscardedCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saNtfStaticSuppressionFilterSetCallback) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaNtfCallbacksT_3),
            "::",
            stringify!(saNtfStaticSuppressionFilterSetCallback)
        )
    );
}
extern "C" {
    pub fn saNtfInitialize_3(
        ntfHandle: *mut SaNtfHandleT,
        ntfCallbacks: *const SaNtfCallbacksT_3,
        version: *mut SaVersionT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfSelectionObjectGet(
        ntfHandle: SaNtfHandleT,
        selectionObject: *mut SaSelectionObjectT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfDispatch(ntfHandle: SaNtfHandleT, dispatchFlags: SaDispatchFlagsT) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfFinalize(ntfHandle: SaNtfHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfObjectCreateDeleteNotificationAllocate(
        ntfHandle: SaNtfHandleT,
        notification: *mut SaNtfObjectCreateDeleteNotificationT,
        numCorrelatedNotifications: SaUint16T,
        lengthAdditionalText: SaUint16T,
        numAdditionalInfo: SaUint16T,
        numAttributes: SaUint16T,
        variableDataSize: SaInt16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfAttributeChangeNotificationAllocate(
        ntfHandle: SaNtfHandleT,
        notification: *mut SaNtfAttributeChangeNotificationT,
        numCorrelatedNotifications: SaUint16T,
        lengthAdditionalText: SaUint16T,
        numAdditionalInfo: SaUint16T,
        numAttributes: SaUint16T,
        variableDataSize: SaInt16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfStateChangeNotificationAllocate(
        ntfHandle: SaNtfHandleT,
        notification: *mut SaNtfStateChangeNotificationT,
        numCorrelatedNotifications: SaUint16T,
        lengthAdditionalText: SaUint16T,
        numAdditionalInfo: SaUint16T,
        numStateChanges: SaUint16T,
        variableDataSize: SaInt16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfAlarmNotificationAllocate(
        ntfHandle: SaNtfHandleT,
        notification: *mut SaNtfAlarmNotificationT,
        numCorrelatedNotifications: SaUint16T,
        lengthAdditionalText: SaUint16T,
        numAdditionalInfo: SaUint16T,
        numSpecificProblems: SaUint16T,
        numMonitoredAttributes: SaUint16T,
        numProposedRepairActions: SaUint16T,
        variableDataSize: SaInt16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfSecurityAlarmNotificationAllocate(
        ntfHandle: SaNtfHandleT,
        notification: *mut SaNtfSecurityAlarmNotificationT,
        numCorrelatedNotifications: SaUint16T,
        lengthAdditionalText: SaUint16T,
        numAdditionalInfo: SaUint16T,
        variableDataSize: SaInt16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfPtrValAllocate(
        notificationHandle: SaNtfNotificationHandleT,
        dataSize: SaUint16T,
        dataPtr: *mut *mut ::std::os::raw::c_void,
        value: *mut SaNtfValueT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfArrayValAllocate(
        notificationHandle: SaNtfNotificationHandleT,
        numElements: SaUint16T,
        elementSize: SaUint16T,
        arrayPtr: *mut *mut ::std::os::raw::c_void,
        value: *mut SaNtfValueT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationSend(notificationHandle: SaNtfNotificationHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationFree(notificationHandle: SaNtfNotificationHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfVariableDataSizeGet(
        notificationHandle: SaNtfNotificationHandleT,
        variableDataSpaceAvailable: *mut SaUint16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfLocalizedMessageGet(
        notificationHandle: SaNtfNotificationHandleT,
        message: *mut SaStringT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfLocalizedMessageFree_2(ntfHandle: SaNtfHandleT, message: SaStringT) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfPtrValGet(
        notificationHandle: SaNtfNotificationHandleT,
        value: *mut SaNtfValueT,
        dataPtr: *mut *mut ::std::os::raw::c_void,
        dataSize: *mut SaUint16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfArrayValGet(
        notificationHandle: SaNtfNotificationHandleT,
        value: *mut SaNtfValueT,
        arrayPtr: *mut *mut ::std::os::raw::c_void,
        numElements: *mut SaUint16T,
        elementSize: *mut SaUint16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfObjectCreateDeleteNotificationFilterAllocate(
        ntfHandle: SaNtfHandleT,
        notificationFilter: *mut SaNtfObjectCreateDeleteNotificationFilterT,
        numEventTypes: SaUint16T,
        numNotificationObjects: SaUint16T,
        numNotifyingObjects: SaUint16T,
        numNotificationClassIds: SaUint16T,
        numSourceIndicators: SaUint16T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfAttributeChangeNotificationFilterAllocate(
        ntfHandle: SaNtfHandleT,
        notificationFilter: *mut SaNtfAttributeChangeNotificationFilterT,
        numEventTypes: SaUint16T,
        numNotificationObjects: SaUint16T,
        numNotifyingObjects: SaUint16T,
        numNotificationClassIds: SaUint16T,
        numSourceIndicators: SaUint32T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfStateChangeNotificationFilterAllocate_2(
        ntfHandle: SaNtfHandleT,
        notificationFilter: *mut SaNtfStateChangeNotificationFilterT_2,
        numEventTypes: SaUint16T,
        numNotificationObjects: SaUint16T,
        numNotifyingObjects: SaUint16T,
        numNotificationClassIds: SaUint16T,
        numSourceIndicators: SaUint32T,
        numChangedStates: SaUint32T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfAlarmNotificationFilterAllocate(
        ntfHandle: SaNtfHandleT,
        notificationFilter: *mut SaNtfAlarmNotificationFilterT,
        numEventTypes: SaUint16T,
        numNotificationObjects: SaUint16T,
        numNotifyingObjects: SaUint16T,
        numNotificationClassIds: SaUint16T,
        numProbableCauses: SaUint32T,
        numPerceivedSeverities: SaUint32T,
        numTrends: SaUint32T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfSecurityAlarmNotificationFilterAllocate(
        ntfHandle: SaNtfHandleT,
        notificationFilter: *mut SaNtfSecurityAlarmNotificationFilterT,
        numEventTypes: SaUint16T,
        numNotificationObjects: SaUint16T,
        numNotifyingObjects: SaUint16T,
        numNotificationClassIds: SaUint16T,
        numProbableCauses: SaUint32T,
        numSeverities: SaUint32T,
        numSecurityAlarmDetectors: SaUint32T,
        numServiceUsers: SaUint32T,
        numServiceProviders: SaUint32T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationFilterFree(
        notificationFilterHandle: SaNtfNotificationFilterHandleT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationSubscribe_3(
        notificationFilterHandles: *const SaNtfNotificationTypeFilterHandlesT_3,
        subscriptionId: SaNtfSubscriptionIdT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationReadInitialize_3(
        searchCriteria: *const SaNtfSearchCriteriaT,
        notificationFilterHandles: *const SaNtfNotificationTypeFilterHandlesT_3,
        readHandle: *mut SaNtfReadHandleT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationUnsubscribe_2(
        ntfHandle: SaNtfHandleT,
        subscriptionId: SaNtfSubscriptionIdT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationReadNext(
        readHandle: SaNtfReadHandleT,
        searchDirection: SaNtfSearchDirectionT,
        notification: *mut SaNtfNotificationsT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saNtfNotificationReadFinalize(readHandle: SaNtfReadHandleT) -> SaAisErrorT;
}
