pub use crate::clBindings::clCommon::*;
/* automatically generated by rust-bindgen 0.66.1 */

pub const CL_CPM_DEFAULT_MIN_FREQ: u32 = 2000;
pub const CL_CPM_DEFAULT_MAX_FREQ: u32 = 32000;
#[doc = " This indicates the component does not have any execution\n context."]
pub const ClCpmCompProcessRelT_CL_CPM_COMP_NONE: ClCpmCompProcessRelT = 0;
#[doc = " This indicates the component consists of multiple processes."]
pub const ClCpmCompProcessRelT_CL_CPM_COMP_MULTI_PROCESS: ClCpmCompProcessRelT = 1;
#[doc = " This indicates the component consists of a single process."]
pub const ClCpmCompProcessRelT_CL_CPM_COMP_SINGLE_PROCESS: ClCpmCompProcessRelT = 2;
#[doc = " This indicates that the component consists of multiple threads,\n but the process does not belong to the component."]
pub const ClCpmCompProcessRelT_CL_CPM_COMP_THREADED: ClCpmCompProcessRelT = 3;
#[doc = " This definition of enum indicates the relationship between the\n component and the process."]
pub type ClCpmCompProcessRelT = ::std::os::raw::c_uint;
#[doc = " This is the definition of the class of the node."]
#[repr(C)]
pub struct ClCpmNodeClassTypeT {
    #[doc = "  Node name."]
    pub name: ClNameT,
    #[doc = " Node identifier, an opaque string to the CPM."]
    pub identifier: ClNameT,
}
#[test]
fn bindgen_test_layout_ClCpmNodeClassTypeT() {
    const UNINIT: ::std::mem::MaybeUninit<ClCpmNodeClassTypeT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClCpmNodeClassTypeT>(),
        516usize,
        concat!("Size of: ", stringify!(ClCpmNodeClassTypeT))
    );
    assert_eq!(
        ::std::mem::align_of::<ClCpmNodeClassTypeT>(),
        2usize,
        concat!("Alignment of ", stringify!(ClCpmNodeClassTypeT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClCpmNodeClassTypeT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(ClCpmNodeClassTypeT),
            "::",
            stringify!(identifier)
        )
    );
}
#[doc = "  This structure is used by the clCpmCardMatch() API."]
#[repr(C)]
pub struct ClCpmSlotClassTypesT {
    #[doc = " Indicates the number of items in the \\e nodeClassTypes."]
    pub numItems: ClUint32T,
    #[doc = " Array of \\e nodeClass and the identifier pair"]
    pub nodeClassTypes: *mut ClCpmNodeClassTypeT,
}
#[test]
fn bindgen_test_layout_ClCpmSlotClassTypesT() {
    const UNINIT: ::std::mem::MaybeUninit<ClCpmSlotClassTypesT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClCpmSlotClassTypesT>(),
        16usize,
        concat!("Size of: ", stringify!(ClCpmSlotClassTypesT))
    );
    assert_eq!(
        ::std::mem::align_of::<ClCpmSlotClassTypesT>(),
        8usize,
        concat!("Alignment of ", stringify!(ClCpmSlotClassTypesT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numItems) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClCpmSlotClassTypesT),
            "::",
            stringify!(numItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeClassTypes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClCpmSlotClassTypesT),
            "::",
            stringify!(nodeClassTypes)
        )
    );
}
