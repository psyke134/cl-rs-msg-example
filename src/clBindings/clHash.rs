pub use crate::clBindings::clCommon::*;
pub use crate::clBindings::clCommonErrors::*;
/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashStruct {
    pub pNext: *mut hashStruct,
    pub ppPrev: *mut *mut hashStruct,
}
#[test]
fn bindgen_test_layout_hashStruct() {
    const UNINIT: ::std::mem::MaybeUninit<hashStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashStruct>(),
        16usize,
        concat!("Size of: ", stringify!(hashStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<hashStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(hashStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashStruct),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppPrev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashStruct),
            "::",
            stringify!(ppPrev)
        )
    );
}
