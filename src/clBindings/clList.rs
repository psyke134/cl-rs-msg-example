/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClListHead {
    pub pNext: *mut ClListHead,
    pub pPrev: *mut ClListHead,
}
#[test]
fn bindgen_test_layout_ClListHead() {
    const UNINIT: ::std::mem::MaybeUninit<ClListHead> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClListHead>(),
        16usize,
        concat!("Size of: ", stringify!(ClListHead))
    );
    assert_eq!(
        ::std::mem::align_of::<ClListHead>(),
        8usize,
        concat!("Alignment of ", stringify!(ClListHead))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClListHead),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClListHead),
            "::",
            stringify!(pPrev)
        )
    );
}
pub type ClListHeadT = ClListHead;
