pub use crate::clBindings::clCommon::*;
pub use crate::clBindings::clIocApi::*;
pub use crate::clBindings::clTimerApi::*;
pub use crate::clBindings::clBufferApi::*;
pub use crate::clBindings::clCntApi::*;
/* automatically generated by rust-bindgen 0.66.1 */

pub const CL_IOC_DEF_MAX_ALLOWED_XPORTS: u32 = 5;
pub const CL_IOC_MAX_XPORT_STRING_LENGTH: u32 = 127;
pub const CL_IOC_MAX_XPORT_ADDR_SIZE: u32 = 127;
pub const CL_IOC_MAX_XPORT_NAME_LENGTH: u32 = 127;
pub const CL_IOC_MIN_MTU_SIZE: u32 = 256;
#[repr(C)]
pub struct ClIocTransportStats {
    pub sendMsgs: ClUint32T,
    pub recvMsgs: ClUint32T,
    pub sendBytes: ClUint32T,
    pub recvBytes: ClUint32T,
    pub badMsgs: ClUint32T,
    pub dropMsgs: ClUint32T,
}
#[test]
fn bindgen_test_layout_ClIocTransportStats() {
    const UNINIT: ::std::mem::MaybeUninit<ClIocTransportStats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClIocTransportStats>(),
        24usize,
        concat!("Size of: ", stringify!(ClIocTransportStats))
    );
    assert_eq!(
        ::std::mem::align_of::<ClIocTransportStats>(),
        4usize,
        concat!("Alignment of ", stringify!(ClIocTransportStats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendMsgs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportStats),
            "::",
            stringify!(sendMsgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recvMsgs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportStats),
            "::",
            stringify!(recvMsgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendBytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportStats),
            "::",
            stringify!(sendBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recvBytes) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportStats),
            "::",
            stringify!(recvBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).badMsgs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportStats),
            "::",
            stringify!(badMsgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dropMsgs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportStats),
            "::",
            stringify!(dropMsgs)
        )
    );
}
pub type ClIocTransportStatsT = ClIocTransportStats;
pub type ClIocTransportLinkConfigT = ClIocTransportLinkConfig;
pub type ClIocCoreFuncT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ClBufferHandleT,
        arg2: *mut ClIocTransportLinkConfigT,
        arg3: *mut ClUint8T,
    ) -> ClRcT,
>;
pub type ClIocTransportFuncT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ClIocTransportLinkConfigT) -> ClRcT>;
pub type ClIocTransportSendFuncT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ClBufferHandleT,
        arg2: *mut ClIocTransportLinkConfigT,
        arg3: *mut ClUint8T,
    ) -> ClRcT,
>;
pub type ClIocTransportAddrConvertFuncT = ::std::option::Option<
    unsafe extern "C" fn(
        pTransportAddress: *mut ClUint8T,
        pIocArpAddrBytes: *mut ClUint8T,
    ) -> ClRcT,
>;
pub type ClIocGroupCreateFuncT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ClIocAddressT, arg2: *mut ClUint8T) -> ClRcT,
>;
pub type ClIocGroupJoinFuncT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ClUint8T) -> ClRcT>;
pub type ClIocGroupLeaveFuncT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ClUint8T) -> ClRcT>;
pub type ClIocGroupDeleteFuncT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ClUint8T) -> ClRcT>;
#[repr(C)]
pub struct ClIocTransportLinkConfig {
    pub pXportName: [ClCharT; 128usize],
    pub pXportLinkName: [ClCharT; 128usize],
    pub xportType: ClUint8T,
    pub isChecksumReqd: ClUint8T,
    pub addressSize: ClUint8T,
    pub isBcastSupported: ClUint8T,
    pub xportBcastAddress: [ClUint8T; 128usize],
    pub xportAddress: [ClUint8T; 128usize],
    pub mtuSize: ClUint32T,
    pub pIocXportStats: *mut ClIocTransportStatsT,
    pub iocCoreRecvRoutine: ClIocCoreFuncT,
    pub priority: ClUint8T,
    pub isRegistered: ClUint8T,
    pub pXportLinkPrivData: *mut ::std::os::raw::c_void,
    pub status: ClUint8T,
}
#[test]
fn bindgen_test_layout_ClIocTransportLinkConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ClIocTransportLinkConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClIocTransportLinkConfig>(),
        560usize,
        concat!("Size of: ", stringify!(ClIocTransportLinkConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ClIocTransportLinkConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ClIocTransportLinkConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pXportName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(pXportName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pXportLinkName) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(pXportLinkName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xportType) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(xportType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isChecksumReqd) as usize - ptr as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(isChecksumReqd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressSize) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(addressSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isBcastSupported) as usize - ptr as usize },
        259usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(isBcastSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xportBcastAddress) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(xportBcastAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xportAddress) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(xportAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtuSize) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(mtuSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIocXportStats) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(pIocXportStats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iocCoreRecvRoutine) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(iocCoreRecvRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isRegistered) as usize - ptr as usize },
        537usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(isRegistered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pXportLinkPrivData) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(pXportLinkPrivData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportLinkConfig),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
pub struct ClIocTransportConfig {
    pub version: ClUint8T,
    pub pXportName: [ClCharT; 128usize],
    pub priority: ClUint8T,
    pub xportType: ClUint8T,
    pub initRoutine: ClIocTransportFuncT,
    pub sendRoutine: ClIocTransportSendFuncT,
    pub closeRoutine: ClIocTransportFuncT,
    pub addrConvertRoutine: ClIocTransportAddrConvertFuncT,
    pub addrExtractRoutine: ClIocTransportAddrConvertFuncT,
}
#[test]
fn bindgen_test_layout_ClIocTransportConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ClIocTransportConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClIocTransportConfig>(),
        176usize,
        concat!("Size of: ", stringify!(ClIocTransportConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ClIocTransportConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ClIocTransportConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pXportName) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(pXportName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xportType) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(xportType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initRoutine) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(initRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendRoutine) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(sendRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closeRoutine) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(closeRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrConvertRoutine) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(addrConvertRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrExtractRoutine) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ClIocTransportConfig),
            "::",
            stringify!(addrExtractRoutine)
        )
    );
}
pub type ClIocTransportConfigT = ClIocTransportConfig;
extern "C" {
    pub fn clIocTransportRegister(pXportObjConfig: *mut ClIocTransportConfigT) -> ClRcT;
}
extern "C" {
    pub fn clIocTransportDeregister(pXportName: *mut ClCharT) -> ClRcT;
}
extern "C" {
    pub fn clIocLinkRegister(pXportLinkConfig: *mut ClIocTransportLinkConfigT) -> ClRcT;
}
extern "C" {
    pub fn clIocLinkDeregister(pXportLinkName: *mut ClCharT, pXportName: *mut ClCharT) -> ClRcT;
}
